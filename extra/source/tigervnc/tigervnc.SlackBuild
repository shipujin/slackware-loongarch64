#!/bin/bash

# Copyright 2010, 2011, 2012, 2013, 2014, 2015  Eric Hameleers, Eindhoven. NL
# Copyright 2015, 2016, 2020, 2021  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=tigervnc
VERSION=${VERSION:-$(echo $PKGNAM-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)}
XORGVER=${XORGVER:-$(echo xorg-server-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)}
BUILD=${BUILD:-5}

# Do we build the java applet (needs jdk)?
JAVA_APPLET=${JAVA_APPLET:-"OFF"}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i?86) ARCH=i586 ;;
    arm*) readelf /usr/bin/file -A | grep -E -q "Tag_CPU.*[4,5]" && ARCH=arm || ARCH=armv7hl ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *) ARCH=$(uname -m) ;;
  esac
  export ARCH
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD.txz"
  exit 0
fi

NUMJOBS=${NUMJOBS:-" -j $(expr $(nproc) + 1) "}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "armv7hl" ]; then
  SLKCFLAGS="-O3 -march=armv7-a -mfpu=vfpv3-d16"
  LIBDIRSUFFIX=""
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

# GCC 14 "fix":
SLKCFLAGS="$SLKCFLAGS -Wno-error=declaration-missing-parameter-type"

export CFLAGS="$SLKCFLAGS"
export CXXFLAGS="$SLKCFLAGS"

TMP=${TMP:-/tmp}
PKG=$TMP/package-$PKGNAM

rm -rf $PKG
mkdir -p $TMP $PKG

cd $TMP
rm -rf $PKGNAM-$VERSION
tar xvf $CWD/$PKGNAM-$VERSION.tar.?z || exit 1
cd $PKGNAM-$VERSION || exit 1
# Extract the X server sources:
tar xvf $CWD/xorg-server-$XORGVER.tar.?z --strip-components=1 -C unix/xserver || exit 1
# Patch the X server sources:
( cd unix/xserver
  zcat $CWD/patches/xserver211.patch.gz | patch -p1 --verbose || exit 1
  zcat $CWD/patches/xorg-server/0001-xfree86-use-modesetting-driver-by-default-on-GeForce.patch.gz | patch -p1 --verbose || exit 1
  zcat $CWD/patches/xorg-server/06_use-intel-only-on-pre-gen4.diff.gz | patch -p1 --verbose || exit 1
  zcat $CWD/patches/xorg-server/fix-nouveau-segfault.diff.gz | patch -p1 --verbose || exit 1
  zcat $CWD/patches/xorg-server/x11.startwithblackscreen.diff.gz | patch -p1 --verbose || exit 1
  zcat $CWD/patches/xorg-server/xorg-server.combo.mouse.keyboard.layout.patch.gz | patch -p1 --verbose || exit 1
  autoreconf -vif || exit 1
) || exit 1

# HACK! Force protocol 3.3 for UVNCSC
zcat $CWD/patches/force_protocol_3.3_for_UVNCSC.patch.gz | patch -p1 || exit 1

# Fix pam.d file:
zcat $CWD/patches/tigervnc.pam.d.diff.gz | patch -p1 --verbose || exit 1

if [ "$JAVA_APPLET" = "ON" ]; then
  # Explicitly put the java applet into a directory named 'tigervnc':
  sed -i -e 's#/vnc/class#/tigervnc/class#'g $(grep -rl vnc/class .)
  sed -i -e 's#DESTINATION vnc/class#DESTINATION share/tigervnc/class#'g $(grep -rl vnc/class .)
fi

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

# Build and install the VNC viewer:
cmake \
  -G "Unix Makefiles" \
  -Wno-dev \
  -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DSYSCONF_INSTALL_DIR=/etc \
  -DLIB_SUFFIX=${LIBDIRSUFFIX} \
  -DENABLE_PAM:BOOL=ON \
  -DINSTALL_SYSTEMD_UNITS=OFF \
  -DBUILD_JAVA:BOOL=${JAVA_APPLET} \
  .
make V=1 $NUMJOBS || make || exit 1
make DESTDIR=$PKG install || exit 1

# Build and install the VNC server:
( cd unix/xserver
  # Default font paths to be used by the X server
  DEF_FONTPATH="/usr/share/fonts/local,/usr/share/fonts/TTF,/usr/share/fonts/OTF,/usr/share/fonts/Type1,/usr/share/fonts/misc,/usr/share/fonts/CID,/usr/share/fonts/75dpi/:unscaled,/usr/share/fonts/100dpi/:unscaled,/usr/share/fonts/75dpi,/usr/share/fonts/100dpi,/usr/share/fonts/cyrillic"
  ./configure \
    --prefix=/usr \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --sysconfdir=/etc \
    --localstatedir=/var \
    --disable-dri --enable-dri2 --disable-dri3 \
    --disable-static \
    --disable-xorg --disable-xnest --disable-xvfb --disable-dmx \
    --disable-xwin --disable-xephyr --disable-kdrive --disable-xwayland \
    --enable-composite \
    --enable-glx --enable-glx-tls \
    --enable-install-libxf86config \
    --enable-xcsecurity \
    --enable-xinerama \
    --with-int10=x86emu \
    --with-default-font-path="${DEF_FONTPATH}" \
    --with-dri-driver-path=/usr/lib${LIBDIRSUFFIX}/xorg/modules/dri \
    --with-module-dir=/usr/lib${LIBDIRSUFFIX}/xorg/modules \
    --with-pic \
    --with-xkb-path=/etc/X11/xkb \
    --with-xkb-output=/var/lib/xkb \
    --disable-config-dbus \
    --disable-config-hal \
    --disable-config-udev \
    --disable-docs --disable-devel-docs \
    --disable-selective-werror \
    --disable-unit-tests \
    --without-dtrace \
    --with-os-name="$(head -1 /etc/slackware-version)" \
    --with-os-vendor="Slackware Linux Project" \
    --with-builderstring="Built by Slackware for xorg-server-$XORGVER" \
    --build=$TARGET || exit 1
  make V=1 TIGERVNC_SRCDIR="$TMP/${PKGNAM}-${VERSION}" $NUMJOBS || exit 1
  make TIGERVNC_SRCDIR="$TMP/${PKGNAM}-${VERSION}" -C hw/vnc \
    DESTDIR=$PKG install || exit 1
) || exit 1

# Relocate the man pages:
mv $PKG/usr/share/man $PKG/usr

# Remove installed docs (we'll install them later):
rm -r $PKG/usr/share/doc

# Provide a sample configuration for the libvnc.so extension of X.Org,
# documentation is available inside the file:
mkdir -p $PKG/etc/X11/xorg.conf.d
install -m644 $CWD/10-libvnc.conf $PKG/etc/X11/xorg.conf.d/10-libvnc.conf.new

# Protect these config files as .new:
mv $PKG/etc/tigervnc/vncserver-config-defaults $PKG/etc/tigervnc/vncserver-config-defaults.new
mv $PKG/etc/tigervnc/vncserver-config-mandatory $PKG/etc/tigervnc/vncserver-config-mandatory.new
mv $PKG/etc/tigervnc/vncserver.users $PKG/etc/tigervnc/vncserver.users.new

# Install icons:
mkdir -p $PKG/usr/share/icons/hicolor/{16x16,24x24,32x32,48x48}/apps
for PSIZE in 16 24 32 48; do
  install -m644 media/icons/tigervnc_${PSIZE}.png \
    $PKG/usr/share/icons/hicolor/${PSIZE}x${PSIZE}/apps/tigervnc.png
done

# Check some additional locations for a suitable startup script, in this order:
# 1. $HOME/.vnc/xstartup
# 2. $HOME/.xinitrc
# 3. /etc/X11/xinit/xinitrc
( cd $PKG/usr/libexec
  zcat $CWD/patches/vncserver.xinitrc.diff.gz | patch -p1 --verbose || exit 1
  rm -f vncserver.orig
) || exit 1

# Make a symlink for vncserver in the old location:
if [ ! -r $PKG/usr/bin/vncserver ]; then
  ( cd $PKG/usr/bin ; ln -sf ../libexec/vncserver . )
fi

# Don't ship .la files:
rm -f $PKG/{,usr/}lib${LIBDIRSUFFIX}/*.la

# Strip binaries:
find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Compress manual pages:
find $PKG/usr/man -type f -exec gzip -9 {} \+
for i in $( find $PKG/usr/man -type l ) ; do
  ln -s $( readlink $i ).gz $i.gz
  rm $i
done

# Add a documentation directory:
mkdir -p $PKG/usr/doc/${PKGNAM}-$VERSION
cp -a \
  BUILDING* LICENCE* README* doc/* \
  $PKG/usr/doc/${PKGNAM}-$VERSION
cp -a unix/xserver/COPYING $PKG/usr/doc/${PKGNAM}-$VERSION/COPYING.xorg-server

mkdir -p $PKG/install
zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $TMP/$PKGNAM-$VERSION-$ARCH-$BUILD.txz
