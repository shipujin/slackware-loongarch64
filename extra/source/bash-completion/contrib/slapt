# slapt-get and slapt-src completion

have slapt-get &&
_slapt_get()
{
    COMPREPLY=()
    local cur prev
    _get_comp_words_by_ref cur prev

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--download-only -d --simulate -s \
            --no-prompt -y --prompt -p --reinstall --ignore-excludes \
            --no-md5 --ignore-dep --no-dep --print-uris --show-stats -S \
            --config -c --remove-obsolete --retry --no-upgrade \
            --update -u --upgrade --dist-upgrade --install -i --install-set \
            --remove --show --filelist --search --list --available \
            --installed --clean --autoclean --add-keys \
            --version --help -h' -- "$cur" ) )
        return 0
    fi

    case $prev in
        --config|-c)
            _filedir
            return 0
            ;;
        --retry|--search)
            # argument required but no completions available
            return 0
            ;;
    esac

    local words t
    _get_comp_words_by_ref words

    # search for last action (--install|--install-set|--remove|--show|--filelist)
    for (( i=${#words[@]}-1; i>0; i-- )); do
        if [[ ${words[i]} == -@(i|-install|-show) ]]; then
            t="all"
            break
        elif [[ ${words[i]} == --install-set ]]; then
            t="set"
            break
        elif [[ ${words[i]} == --@(remove|filelist) ]]; then
            t="ins"
            break
        fi
    done

    case $t in
        all) # --install|-i|--show
            # slapt-get will fail to search for "^name-version"
            # it can search for names only
            local name=$( echo $cur | cut -f1 -d- )
            COMPREPLY=( $( slapt-get --search "^$name" 2> /dev/null | \
                sed -ne "/^$cur/{s/ .*$//;p}" ) )
            return 0
            ;;
        ins) # --remove|--filelist
            COMPREPLY=( $( cd /var/log/packages; compgen -f -- "$cur" ) )
            return 0
            ;;
        set) # --install-set
            COMPREPLY=( $( compgen -W 'a ap d e f k kde kdei l n t tcl x \
                xap y' -- "$cur" ) )
            return 0
            ;;
    esac
} && complete -F _slapt_get slapt-get

have slapt-src &&
_slapt_src()
{
    COMPREPLY=()
    local cur prev
    _get_comp_words_by_ref cur prev

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '--update -u --list -l --clean -e \
            --search -s --show -w --install -i --build -b --fetch -f \
            --yes -y --config -c --no-dep -n --postprocess -p \
            --version -v --help -h' -- "$cur" ) )
        return 0
    fi

    case $prev in
        --config|-c)
            _filedir
            return 0
            ;;
        --search|-s|--postprocess|-p)
            # argument required but no completions available
            return 0
            ;;
    esac

    local words
    _get_comp_words_by_ref words

    local t
    # search for last action (-i|-w|-b|-f)
    for (( i=${#words[@]}-1; i>0; i-- )); do
        if [[ ${words[i]} == -@(i|w|f|b|-install|-show|-build|-fetch) ]]; then
            t="all"
            break
        fi
    done
    if [ "$t" != "all" ]; then
        return 0
    fi

    local config="/etc/slapt-get/slapt-srcrc" # default config location
    # search for config
    for (( i=${#words[@]}-1; i>0; i-- )); do
        if [[ ${words[i]} == -@(c|-config) ]]; then
            config="${words[i+1]}"
            break
        fi
    done
    if [ ! -r "$config" ]; then
        return 0
    fi

    local builddir=$( sed -ne "/^BUILDDIR=/{s/^BUILDDIR=//;p}" "$config" )
    if [ ! -d "$builddir" ]; then
        return 0
    fi

    local slck_data="${builddir}/slackbuilds_data"
    if [ ! -r "$slck_data" ]; then
        return 0
    fi

    COMPREPLY=( $( sed -ne \
        "/^SLACKBUILD NAME: $cur/{s/^SLACKBUILD NAME: //;p}" "$slck_data" ) )
} && complete -F _slapt_src slapt-src
