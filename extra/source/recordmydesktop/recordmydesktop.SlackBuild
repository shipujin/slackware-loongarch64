#!/bin/sh
# $Id: recordmydesktop.SlackBuild,v 1.8 2009/05/12 22:14:43 root Exp root $
# Copyright (c) 2008 Eric Hameleers <alien@slackware.com>
# Copyright 2018  Patrick J. Volkerding, Sebeka, Minnesota, USA
# All rights reserved.
#
#   Permission to use, copy, modify, and distribute this software for
#   any purpose with or without fee is hereby granted, provided that
#   the above copyright notice and this permission notice appear in all
#   copies.
#
#   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#   IN NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# Slackware SlackBuild script 
# ===========================
# By:         Eric Hameleers <alien@slackware.com>
# For:        recordmydesktop
# Descr:      record desktop sessions with audio and video
# URL:        http://recordmydesktop.sourceforge.net/
# Needs:      
# Changelog:  
# 0.3.8.1-1:  17/Dec/2008 by Eric Hameleers <alien@slackware.com>
#             * Initial build.
# 0.3.8.1-2:  13/may/2009 by Eric Hameleers <alien@slackware.com>
#             * Rebuilt for python 2.6.2.
# 
# Run 'sh recordmydesktop.SlackBuild --cleanup' to build a Slackware package.
# The package (.txz) and .txt file as well as build logs are created in /tmp .
# Install it using 'installpkg'. 
#
# -----------------------------------------------------------------------------

# Set initial variables:

PKGNAM=recordmydesktop
VERSION=${VERSION:-0.3.8.1}
QTVER=${QTVER:-0.3.8}
BUILD=${BUILD:-4}
NUMJOBS=${NUMJOBS:" -j7 "}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i?86) ARCH=i586 ;;
    arm*) readelf /usr/bin/file -A | egrep -q "Tag_CPU.*[4,5]" && ARCH=arm || ARCH=armv7lh ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *) ARCH=$(uname -m) ;;
  esac
  export ARCH
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD.txz"
  exit 0
fi

DOCS="AUTHORS COPYING README ChangeLog"
QTDOCS="AUTHORS COPYING README ChangeLog"

# Where do we look for sources?
cd $(dirname $0) ; SRCDIR=$(pwd)

# Place to build (TMP) package (PKG) and output (OUTPUT) the program:
TMP=${TMP:-/tmp/build}
PKG=$TMP/package-$PKGNAM
OUTPUT=${OUTPUT:-/tmp}

SOURCE[0]="$SRCDIR/${PKGNAM}-${VERSION}.tar.gz"
SRCURL[0]="http://downloads.sourceforge.net/${PKGNAM}/${PKGNAM}-${VERSION}.tar.gz"

SOURCE[1]="$SRCDIR/qt-${PKGNAM}-${QTVER}.tar.gz"
SRCURL[1]="http://downloads.sourceforge.net/${PKGNAM}/qt-${PKGNAM}-${QTVER}.tar.gz"

##
## --- with a little luck, you won't have to edit below this point --- ##
##

# Exit the script on errors:
set -e
trap 'echo "$0 FAILED at line ${LINENO}" | tee $OUTPUT/error-${PKGNAM}.log' ERR
# Catch unitialized variables:
set -u
P1=${1:-1}

case "$ARCH" in
  i586)      SLKCFLAGS="-O2 -march=i586 -mtune=i686"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  s390)      SLKCFLAGS="-O2"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  powerpc)   SLKCFLAGS="-O2"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  x86_64)    SLKCFLAGS="-O2 -fPIC"
             SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"
             ;;
  athlon-xp) SLKCFLAGS="-march=athlon-xp -O3 -pipe -fomit-frame-pointer"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
esac

# Create working directories:
mkdir -p $OUTPUT          # place for the package to be saved
mkdir -p $TMP/tmp-$PKGNAM # location to build the source
mkdir -p $PKG             # place for the package to be built
rm -rf $PKG/*             # always erase old package's contents
rm -rf $TMP/tmp-$PKGNAM/* # remove the remnants of previous build
rm -rf $OUTPUT/{configure,make,install,error,makepkg}-$PKGNAM.log
                          # remove old log files

# Source file availability:
for (( i = 0; i < ${#SOURCE[*]}; i++ )) ; do
  if ! [ -f ${SOURCE[$i]} ]; then
    if ! [ "x${SRCURL[$i]}" == "x" ]; then
      # Check if the $SRCDIR is writable at all - if not, download to $OUTPUT
      [ -w "$SRCDIR" ] || SOURCE[$i]="$OUTPUT/$(basename ${SOURCE[$i]})"
      echo "Source '$(basename ${SOURCE[$i]})' not available yet..."
      echo "Will download file to $(dirname $SOURCE[$i])"
      wget -nv -T 20 -O "${SOURCE[$i]}" "${SRCURL[$i]}" || true
      if [ $? -ne 0 -o ! -s "${SOURCE[$i]}" ]; then
        echo "Downloading '$(basename ${SOURCE[$i]})' failed.. aborting the build."
        mv -f "${SOURCE[$i]}" "${SOURCE[$i]}".FAIL
        exit 1
      fi
    else
      echo "File '$(basename ${SOURCE[$i]})' not available.. aborting the build."
      exit 1
    fi
  fi
done

if [ "$P1" == "--download" ]; then
  echo "Download complete."
  exit 0
fi

# --- PACKAGE BUILDING ---

echo "++"
echo "|| $PKGNAM-$VERSION"
echo "++"

cd $TMP/tmp-$PKGNAM
echo "Extracting the source archive(s) for $PKGNAM..."
for (( i = 0; i < ${#SOURCE[*]}; i++ )) ; do
tar -xvf ${SOURCE[$i]}
done
chown -R root:root *
chmod -R u+w,go+r-w,a-s *

echo Building ...

# First, the commandline program:
cd ${PKGNAM}-${VERSION}
  # Apply bugfix patches from Arch:
  zcat $SRCDIR/recordmydesktop-bitrate.patch.gz | patch -p1 --verbose || exit 1
  zcat $SRCDIR/shmstr-to-shmproto.patch.gz | patch -p0 --verbose || exit 1
  LDFLAGS="$SLKLDFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  CFLAGS="$SLKCFLAGS" \
  ./configure --prefix=/usr \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --sysconfdir=/etc \
    --mandir=/usr/man \
    --program-prefix= \
    --program-suffix= \
    --build=$ARCH-slackware-linux \
    2>&1 | tee $OUTPUT/configure-${PKGNAM}.log
  make 2>&1 | tee $OUTPUT/make-${PKGNAM}.log

  if $(which installwatch > /dev/null 2>&1); then
    installwatch -o $OUTPUT/install-${PKGNAM}.log make DESTDIR=$PKG install
  else
    make DESTDIR=$PKG install 2>&1 |tee $OUTPUT/install-${PKGNAM}.log
  fi
cd ..

# Next, the QT4 GUI program:
cd qt-${PKGNAM}-${QTVER}
  LDFLAGS="$SLKLDFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  CFLAGS="$SLKCFLAGS" \
  ./configure --prefix=/usr \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --sysconfdir=/etc \
    --mandir=/usr/man \
    --program-prefix= \
    --program-suffix= \
    --build=$ARCH-slackware-linux \
    2>&1 | tee $OUTPUT/configure-qt-${PKGNAM}.log
  make 2>&1 | tee $OUTPUT/make-qt-${PKGNAM}.log

  if $(which installwatch > /dev/null 2>&1); then
    installwatch -o $OUTPUT/install-${PKGNAM}.log make DESTDIR=$PKG install
  else
    make DESTDIR=$PKG install 2>&1 |tee $OUTPUT/install-${PKGNAM}.log
  fi
cd ..

# Add this to the doinst.sh:
! [ -d $PKG/install ] && mkdir -p $PKG/install
cat <<EOT >> $PKG/install/doinst.sh
# Update the desktop database:
if [ -x usr/bin/update-desktop-database ]; then
  chroot . /usr/bin/update-desktop-database /usr/share/applications > /dev/null 2>&1
fi

EOT

# Add documentation:
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/qt-${PKGNAM}
( cd ${PKGNAM}-${VERSION}
  cp -a $DOCS $PKG/usr/doc/$PKGNAM-$VERSION || true
)
( cd qt-${PKGNAM}-${QTVER}
  cp -a $QTDOCS $PKG/usr/doc/$PKGNAM-$VERSION/qt-${PKGNAM} || true
)
cp -a $SRCDIR/$(basename $0) $PKG/usr/doc/$PKGNAM-$VERSION/$PKGNAM.SlackBuild
chown -R root:root $PKG/usr/doc/$PKGNAM-$VERSION
find $PKG/usr/doc -type f -exec chmod 644 {} \;

# Compress the man page(s):
if [ -d $PKG/usr/man ]; then
  find $PKG/usr/man -type f -name "*.?" -exec gzip -9f {} \;
  for i in $(find $PKG/usr/man -type l -name "*.?") ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
fi

# Strip binaries:
find $PKG | xargs file | grep -e "executable" -e "shared object" \
  | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a package description:
mkdir -p $PKG/install
cat $SRCDIR/slack-desc > $PKG/install/slack-desc
if [ -f $SRCDIR/doinst.sh ]; then
  cat $SRCDIR/doinst.sh >> $PKG/install/doinst.sh
fi

# Build the package:
cd $PKG
makepkg --linkadd y --chown n $OUTPUT/${PKGNAM}-${VERSION}-${ARCH}-${BUILD}.txz 2>&1 | tee $OUTPUT/makepkg-${PKGNAM}.log
cd $OUTPUT
md5sum ${PKGNAM}-${VERSION}-${ARCH}-${BUILD}.txz > ${PKGNAM}-${VERSION}-${ARCH}-${BUILD}.txz.md5
cd -
cat $PKG/install/slack-desc | grep "^${PKGNAM}" > $OUTPUT/${PKGNAM}-${VERSION}-${ARCH}-${BUILD}.txt
if [ -f $PKG/install/slack-required ]; then
  cat $PKG/install/slack-required > $OUTPUT/${PKGNAM}-${VERSION}-${ARCH}-${BUILD}.dep
fi

