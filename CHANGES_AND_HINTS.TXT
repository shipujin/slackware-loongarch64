This file documents the instructions for upgrading to Slackware -current, the
packages added, removed, renamed, and/or split during the development cycle
from Slackware 14.1 through -current, and some potential "gotchas" that users
can avoid by arming themselves with a little knowledge.


*** INSTRUCTIONS FOR UPGRADING FROM 14.1 ***

Follow the instructions detailed in the UPGRADE.TXT located in this
  directory.  

Note that upgrading from a Slackware version earlier than 14.1 is NOT 
  supported at all and will most likely not work.


*** PACKAGE ADDITIONS SINCE 14.1 ***

a/hwdata
a/libgudev
a/procps-ng
a/eudev
ap/cgmanager
ap/cups-filters
ap/lzip
ap/pamixer
ap/qpdf
ap/squashfs-tools
ap/usbmuxd
d/Cython
d/gnu-cobol
d/python-setuptools
d/scons
kde/amor
kde/artikulate
kde/baloo
kde/baloo-widgets
kde/cervisia
kde/dolphin-plugins
kde/kajongg
kde/kapptemplate
kde/kcachegrind
kde/kcron
kde/kde-dev-scripts
kde/kde-dev-utils
kde/kdeconnect-kde
kde/kdenetwork-filesharing
kde/kdenetwork-strigi-analyzers
kde/kdesdk-kioslaves
kde/kdesdk-strigi-analyzers
kde/kdesdk-thumbnailers
kde/kdev-python
kde/kfilemetadata
kde/kget
kde/kompare
kde/kopete
kde/kppp
kde/krdc
kde/krfb
kde/ksystemlog
kde/kteatime
kde/ktux
kde/kuser
kde/kwalletmanager
kde/libkomparediff2
kde/libmm-qt
kde/libnm-qt
kde/lokalize
kde/okteta
kde/partitionmanager
kde/plasma-nm
kde/poxml
kde/umbrello
kde/zeroconf-ioslave
kdei/calligra-l10n-en_GB
kdei/calligra-l10n-eu
kdei/calligra-l10n-ja
kdei/kde-l10n-id
l/ConsoleKit2
l/LibRaw
l/a52dec
l/adwaita-icon-theme
l/alsa-plugins
l/atkmm
l/cairomm
l/dconf-editor
l/eigen3
l/elfutils
l/glibmm
l/gsl
l/gst-plugins-base0
l/gst-plugins-good0
l/gstreamer0
l/gtkmm2
l/gtkmm3
l/jemalloc
l/json-c
l/judy
l/libasyncns
l/libcap-ng
l/libcdio-paranoia
l/libdvdnav
l/libfakekey
l/libimobiledevice
l/libjpeg-turbo
l/libnih
l/libodfgen
l/librevenge
l/libsigc++
l/libsigsegv
l/libusbmuxd
l/libvisio
l/libvpx
l/libwpg
l/newt
l/openjpeg
l/orc
l/pangomm
l/pulseaudio
l/python-pillow
l/qt-gstreamer
l/sbc
l/serf
l/speexdsp
l/xapian-core
n/libndp
n/libnftnl
n/libssh2
n/libtirpc
n/nftables
n/rpcbind
x/dri3proto
x/libXaw3dXft
x/libXpresent
x/libepoxy
x/libevdev
x/libva
x/libva-intel-driver
x/libvdpau
x/libxshmfence
x/motif
x/presentproto
x/xcb-util-errors
x/xf86-video-amdgpu
xap/gparted
xap/hexchat
xap/pavucontrol
xfce/xfce4-pulseaudio-plugin
extra/fltk/fltk


*** PACKAGE REMOVALS SINCE 14.1 ***

a/cxxlibs (added to aaa_elflibs)
a/procps (replaced by procps-ng)
a/udev (replaced by eudev and libgudev)
ap/foomatic-filters (included with cups-filters)
d/open-cobol (replaced by gnu-cobol)
kde/kdeadmin (split up into smaller packages)
kde/kdenetwork (split up into smaller packages)
kde/kdesdk (split up into smaller packages)
kde/kdetoys (split up into smaller packages)
kde/kwallet (replaced by kwalletmanager)
kde/networkmanagement (split up into smaller packages)
kde/oxygen-gtk3 (?)
kdei/calligra-l10n-ia
kdei/calligra-l10n-nds
kdei/calligra-l10n-sl
kdei/calligra-l10n-tr
kdei/kde-l10n-si
kdei/kde-l10n-tg
kdei/kde-l10n-th
kdei/kde-l10n-vi
l/ConsoleKit (replaced by ConsoleKit2)
n/bluez-hcidump (part of bluez package)
l/gnome-icon-theme (replaced by adwaita-icon-theme)
l/imlib (obsolete)
l/lesstif (replaced by motif)
l/libelf (replaced by elfutils)
l/libjpeg (replaced by libjpeg-turbo)
n/obex-data-server (replaced by obexd included with bluez)
l/phonon-mplayer (unmaintained)
l/phonon-xine (unmaintained)
l/pil (replaced by python-pillow)
n/obexfs (included in obexftp)
n/portmap (replaced by libtirpc and rpcbind)
x/xf86-input-aiptek (unmaintained)
x/xf86-video-modesetting (part of xorg-server package)
xap/xchat (replaced by hexchat)
xfce/libxfcegui4 (obsolete)
xfce/xfce4-mixer (replaced by xfce4-pulseaudio-plugin)
xfce/xfce4-volumed (replaced by xfce4-pulseaudio-plugin)
xfce/xfwm4-themes (unmaintained)


*** NEW USERS/GROUPS SINCE 14.1 ***

input group, GID 71.
sddm user/group, UID 64, GID 64.


*** OTHER NOTABLE CHANGES AND HINTS ***

Use one of the provided generic kernels for daily use.  Do not report
  bugs until/unless you have reproduced them using one of the stock 
  generic kernels.  You will need to create an initrd in order to boot
  the generic kernels - see /boot/README.initrd for instructions.
  The huge kernels are primarily intended as "installer" and "emergency" 
  kernels in case you forget to make an initrd.  For most systems, you 
  should use the generic SMP kernel if it will run, even if your system is 
  not SMP-capable.  Some newer hardware needs the local APIC enabled in the 
  SMP kernel, and theoretically there should not be a performance penalty 
  with using the SMP-capable kernel on a uniprocessor machine, as the SMP 
  kernel tests for this and makes necessary adjustments.  Furthermore, the 
  kernel sources shipped with Slackware are configured for SMP usage, so you 
  won't have to modify those to build external modules (such as NVidia or 
  ATI proprietary drivers) if you use the SMP kernel.

  If you decide to use one of the non-SMP kernels, you will need to follow the
  instructions in /extra/linux-4.4.14-nosmp-sdk/README.TXT to modify your
  kernel sources for non-SMP usage.  Note that this only applies if you are
  using the Slackware-provided non-SMP kernel - if you build a custom kernel,
  the symlinks at /lib/modules/$(uname -r)/{build,source} will point to the
  correct kernel source so long as you don't (re)move it.

Printing, scanning, and bluetooth usage require that your user account be a
  member of the "lp" group (membership in the "scanner" group is no longer
  needed by any of the included scanner drivers, though some third party
  drivers may still need it); we had to configure sane to use the "lp" group
  or else multifunction devices (e.g. print/scan/copy units) would only do
  one or the other (depending on whether the group ownership was "lp" or
  "scanner").

Since pulseaudio is now included with Slackware, you'll almost surely want
  /etc/rc.d/rc.alsa to be mode 0644 (non-executable) since it no longer needs
  to be run on system boot.

Xorg no longer uses /etc/X11/xorg.conf by default (and in most cases, there
  is absolutely no need for it).   You can still create an xorg.conf file if 
  you wish, or you can create some minimal xorg.conf snippets with only the 
  specific contents that you wish to override (as an example, to use a binary
  video driver) as separate files in the /etc/X11/xorg.conf.d/ directory.

  /usr/share/X11/xorg.conf.d/ is the "packaged" configuration directory; all
  files ending with ".conf" in this directory are used by the X server 
  unless there is an identically-named file in the local sysadmin directory.
  The local sysadmin config directory is /etc/X11/xorg.conf.d/ - all files
  ending with ".conf" in this directory are parsed.  

  There are several default config files in /usr/share/X11/xorg.conf.d/:
    * 10-evdev.conf
        a "catchall" file for input devices using the evdev driver; this 
        should work for most hardware in the absence of a better driver
    * 10-quirks.conf
        a collection of quirks and blacklists/whitelists for known weirdos
    * 50-synaptics.conf
        overrides the earlier 10-evdev.conf file and uses the synaptics 
        driver for all touchpads
    * 50-vmmouse.conf
        overrides for the earlier 10-evdev.conf file for vmmouse
    * 50-wacom.conf
        overrides the earlier 10-evdev.conf file and uses the wacom driver 
        for Wacom tablets
    * 90-keyboard-layout.conf
        this sample ("normal" en layout) keeps the "old" default of 
        allowing Zap'ing the Xserver.
  If you need to modify any of these defaults, then copy the relevant file
  from /usr/share/X11/xorg.conf.d/ to /etc/X11/xorg.conf.d/ and edit the
  copy.

Now that KMS (Kernel Mode Setting) for graphics cards has (mostly) stabilized,
  it is enabled by default for intel, ati, and nvidia graphics chipsets.  It
  is possible to disable it use "nomodeset" as a kernel append in lilo.conf,
  but Xorg will not work at all on intel and ati chips (and maybe others) if 
  you do that.
  
  If you want to change the resolution of the KMS console, that can be done
  with something like this as a kernel append in lilo.conf:
    append="video=1024x768"

  Speaking of lilo.conf and KMS, make sure you use either vga=normal or 
  vga=extended -- some of the framebuffers don't like KMS very much...

If your cd/dvd drive is not visible inside a gtk-based desktop environment
  (e.g. Xfce), you may need to add "comment=x-gvfs-show" to the /etc/fstab 
  line for the device.  For more information, see this document:
  http://git.gnome.org/browse/gvfs/tree/monitor/udisks2/what-is-shown.txt

If you have set up an encrypted root partition, you will need to have access 
  to your keyboard in order to type the passphrase.  This may require you to 
  add the uhci-hcd and usbhid modules to your initrd image if you have a USB 
  keyboard.  Also note that if you are using a non-US keyboard, you can use the
  '-l' parameter to the 'mkinitrd' command in order to add support for this
  keyboard to your initrd.

If you have permission errors when attempting to burn a cdrom or dvd image,
  such as the following:
    /usr/bin/cdrecord: Operation not permitted. Cannot send SCSI cmd via ioctl
  then cdrecord almost certainly needs root privileges to work correctly.
  One potential solution is to make the cdrecord and cdrdao binaries suid root,
  but this has possible security implications.  The safest way to do that is 
  to make those binaries suid root, owned by a specific group, and executable
  by only root and members of that group.  For most people, the example below
  will be sufficient (but adjust as desired depending on your specific needs):
    chown root:cdrom /usr/bin/cdrecord /usr/bin/cdrdao
    chmod 4750 /usr/bin/cdrecord /usr/bin/cdrdao
  If you don't want all members of the 'cdrom' group to be able to execute the
  two suid binaries, then create a special group (such as 'burning' which is
  recommended by k3b), use it instead of 'cdrom' in the line above, and add
  to it only the users you wish to have access to cdrecord and cdrdao.

If you're installing on a virtual machine with QEMU/KVM using virtio disks,
  you will need the following line in /etc/lilo.conf to make it recognize
  the /dev/vda devices:
    disk=/dev/vda bios=0x80 max-partitions=7

Input methods for complex characters (CJK, which is shorthand for Chinese,
  Japanese, Korean) and other non-latin character sets have been added. These
  input methods use the SCIM (Smart Common Input Method) platform.
  The environment variables for SCIM support are set in /etc/profile.d/scim.sh
  The requirements for getting SCIM input methods to work in your X session
  are as follows:
  (1) Use a UTF-8 locale. Look in /etc/profile.d/lang.sh for setting your
      language to (for instance) en_US.UTF-8. As a word of warning: maybe you
      should leave root with a non-UTF-8 locale because you don't want root's
      commands to be misinterpreted. You can add the following line to your
      ~/.profile file to enable UTF-8 just for yourself:
        export LANG=en_US.UTF-8
  (2) Make the scim profile scripts executable. These will setup your
      environment correctly for the use of scim with X applications. Run:
        chmod +x /etc/profile.d/scim.*
  (3) Start the scim daemon as soon as your X session starts. The scim daemon
      must be active before any of your X applications. In KDE, you can add a
      shell script to the ~/.kde/Autostart folder that runs the command
      "scim -d". In XFCE you can add "scim -d" to the Autostarted Applications.
      If you boot your computer in runlevel 4 (the graphical XDM/KDM login)
      you can simply add the line "scim -d" to your ~/.xprofile file.
      This gives you a Desktop Environment independent way of starting scim.
  When scim is running, you will see a small keyboard icon in your system tray.
  Right-click it to enter SCIM Setup. In 'Global Setup' select your keyboard
  layout, and you are ready to start entering just about any language
  characters you wish! Press the magical key combo <Control><Space>
  in order to activate or deactivate SCIM input. The SCIM taskbar in the
  desktop's corner allows you to select a language. As you type, SCIM will show
  an overview of applicable character glyphs (if you are inputting complex
  characters like Japanese).

