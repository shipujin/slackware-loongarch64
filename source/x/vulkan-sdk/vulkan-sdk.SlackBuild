#!/bin/bash

# Slackware build script for vulkan-sdk

# Copyright 2016, 2017, 2018, 2020, 2021, 2022, 2023, 2024  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=vulkan-sdk
# The ./VERSION file is created by ./fetch-sources.sh:
VERSION=${VERSION:-$(cat VERSION)}
BUILD=${BUILD:-2}

# Choose a compiler (gcc/g++ or clang/clang++ if you'd like to debug that ;-)
export CC=${CC:-gcc}
export CXX=${CXX:-g++}

# Automatically determine the architecture we're building on:
MARCH=$( uname -m )
if [ -z "$ARCH" ]; then
  case "$MARCH" in
    i?86)    export ARCH=i686 ;;
    armv7hl) export ARCH=$MARCH ;;
    arm*)    export ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *)       export ARCH=$MARCH ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD.txz"
  exit 0
fi

NUMJOBS=${NUMJOBS:-" -j$(expr $(nproc) + 1) "}

if [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=pentium4 -mtune=generic"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -march=x86-64 -mtune=generic -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

TMP=${TMP:-/tmp}
PKG=$TMP/package-vulkan-sdk

GLSLANG_VERSION=$(echo glslang-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
SPIRV_HEADERS_VERSION=$(echo SPIRV-Headers-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
SPIRV_TOOLS_VERSION=$(echo SPIRV-Tools-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
VULKAN_HEADERS_VERSION=$(echo Vulkan-Headers-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
VULKAN_LOADER_VERSION=$(echo Vulkan-Loader-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
VULKAN_VALIDATIONLAYERS_VERSION=$(echo Vulkan-ValidationLayers-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
ROBIN_HOOD_VERSION=$(echo robin-hood-hashing-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
VULKAN_EXTENSIONLAYER_VERSION=$(echo Vulkan-ExtensionLayer-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
VULKAN_TOOLS_VERSION=$(echo Vulkan-Tools-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
VULKANTOOLS_VERSION=$(echo VulkanTools-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
SHADERC_VERSION=$(echo shaderc-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
SPIRV_CROSS_VERSION=$(echo SPIRV-Cross-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
GFXRECONSTRUCT_VERSION=$(echo gfxreconstruct-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
DXC_VERSION=$(echo DirectXShaderCompiler-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
SPIRV_REFLECT_VERSION=$(echo SPIRV-Reflect-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
VULKAN_PROFILES_VERSION=$(echo Vulkan-Profiles-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
VOLK_VERSION=$(echo volk-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
VULKAN_UTILITY_LIBRARIES_VERSION=$(echo Vulkan-Utility-Libraries-vulkan-sdk-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
VULKAN_CAPS_VIEWER_VERSION=$(echo VulkanCapsViewer-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
VULKAN_MEMORY_ALLOCATOR_VERSION=$(echo VulkanMemoryAllocator-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
VALIJSON_VERSION=$(echo valijson-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)
JSONCPP_VERSION=$(echo jsoncpp-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)

# upstream builder order:
# NOTE from volkerdi: any magic build order given in the comments is always, by definition, wrong
# - SPIRV-Headers
# - glslang
# - Vulkan-Headers
# - Vulkan-Loader
# - Vulkan-Utility-Libraries
# - Vulkan-ValidationLayers
# - Vulkan-ExtensionLayer
# = valijson
# - Vulkan-Tools
# - VulkanTools
# - shaderc
# - SPIRV-Cross
# - gfxreconstruct
# - DirectXShaderCompiler
# - SPIRV-Reflect
# - Vulkan-Profiles

rm -rf $PKG
mkdir -p $TMP $PKG

cd $TMP
# Clear existing tmp sources:
rm -rf SPIRV-Headers-$SPIRV_HEADERS_VERSION \
  glslang-vulkan-sdk-${GLSLANG_VERSION} \
  Vulkan-Headers-vulkan-sdk-$VULKAN_HEADERS_VERSION \
  Vulkan-Loader-vulkan-sdk-$VULKAN_LOADER_VERSION \
  Vulkan-ValidationLayers-vulkan-sdk-$VULKAN_VALIDATIONLAYERS_VERSION \
  Vulkan-ExtensionLayer-vulkan-sdk-$VULKAN_EXTENSIONLAYER_VERSION \
  Vulkan-Tools-vulkan-sdk-$VULKAN_TOOLS_VERSION \
  VulkanTools-vulkan-sdk-$VULKANTOOLS_VERSION \
  shaderc-$SHADERC_VERSION \
  SPIRV-Cross-vulkan-sdk-$SPIRV_CROSS_VERSION \
  gfxreconstruct-vulkan-sdk-$GFXRECONSTRUCT_VERSION \
  DirectXShaderCompiler-$DXC_VERSION \
  SPIRV-Reflect-vulkan-sdk-$SPIRV_REFLECT_VERSION \
  Vulkan-Profiles-vulkan-sdk-$VULKAN_PROFILES_VERSION \
  volk-vulkan-sdk-$VOLK_VERSION \
  Vulkan-Utility-Libraries-$VULKAN_UTILITY_LIBRARIES_VERSION \
  VulkanCapsViewer-$VULKAN_CAPS_VIEWER_VERSION \
  VulkanMemoryAllocator-$VULKAN_MEMORY_ALLOCATOR_VERSION \
  valijson-$VALIJSON_VERSION \
  jsoncpp-$JSONCPP_VERSION

tar xvf $CWD/SPIRV-Headers-$SPIRV_HEADERS_VERSION.tar.?z || exit 1
cd SPIRV-Headers-$SPIRV_HEADERS_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
cmake \
  -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_INSTALL_LIBDIR=lib$LIBDIRSUFFIX \
  -DCMAKE_BUILD_TYPE=Release \
  ..
make $NUMJOBS || make || exit 1
make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/glslang-vulkan-sdk-${GLSLANG_VERSION}.tar.?z || exit 1
cd glslang-vulkan-sdk-$GLSLANG_VERSION/External
tar xvf $CWD/SPIRV-Tools-vulkan-sdk-$SPIRV_TOOLS_VERSION.tar.?z || exit 1
mv SPIRV-Tools-vulkan-sdk-$SPIRV_TOOLS_VERSION spirv-tools
cd spirv-tools/external
tar xvf $CWD/SPIRV-Headers-$SPIRV_HEADERS_VERSION.tar.?z || exit 1
mv SPIRV-Headers-$SPIRV_HEADERS_VERSION spirv-headers

cd $TMP/glslang-vulkan-sdk-${GLSLANG_VERSION}

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
cmake \
  -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_INSTALL_LIBDIR=lib$LIBDIRSUFFIX \
  -DCMAKE_BUILD_TYPE=Release \
  -DBUILD_SHARED_LIBS=On \
  -DSPIRV_TOOLS_BUILD_STATIC=Off \
  -DENABLE_OPT=Off \
  ..
make $NUMJOBS || make || exit 1
make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/Vulkan-Headers-vulkan-sdk-$VULKAN_HEADERS_VERSION.tar.?z || exit 1
cd Vulkan-Headers-vulkan-sdk-$VULKAN_HEADERS_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

cmake -G Ninja -B build \
  -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_INSTALL_PREFIX=/usr\
  -DCMAKE_INSTALL_LIBDIR=lib$LIBDIRSUFFIX \
  -DCMAKE_BUILD_TYPE=Release \
  . || exit 1
cmake --build build || exit 1
DESTDIR=$PKG cmake --install build || exit 1

cd $TMP
tar xvf $CWD/Vulkan-Loader-vulkan-sdk-$VULKAN_LOADER_VERSION.tar.?z || exit 1
cd $TMP/Vulkan-Loader-vulkan-sdk-$VULKAN_LOADER_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DVULKAN_HEADERS_INSTALL_DIR=$PKG/usr \
    -DBUILD_WSI_WAYLAND_SUPPORT=On \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/robin-hood-hashing-$ROBIN_HOOD_VERSION.tar.?z || exit 1
cd robin-hood-hashing-$ROBIN_HOOD_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DRH_STANDALONE_PROJECT="OFF" \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$TMP/robin-hood-hashing-$ROBIN_HOOD_VERSION/build/install || exit 1

cd $TMP
tar xvf $CWD/Vulkan-Utility-Libraries-vulkan-sdk-$VULKAN_UTILITY_LIBRARIES_VERSION.tar.?z || exit 1
cd $TMP/Vulkan-Utility-Libraries-vulkan-sdk-$VULKAN_UTILITY_LIBRARIES_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_SYSCONFDIR=/usr/share \
    -DVulkanHeaders_DIR=$PKG/usr/share/cmake/VulkanHeaders/ \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/Vulkan-ValidationLayers-vulkan-sdk-$VULKAN_VALIDATIONLAYERS_VERSION.tar.?z || exit 1
cd Vulkan-ValidationLayers-vulkan-sdk-$VULKAN_VALIDATIONLAYERS_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_SYSCONFDIR=/etc \
    -DCMAKE_INSTALL_DATADIR=/share \
    -DCMAKE_SKIP_RPATH=True \
    -DBUILD_TESTS=Off \
    -DBUILD_WSI_XLIB_SUPPORT=On \
    -DBUILD_WSI_XCB_SUPPORT=On \
    -DBUILD_WSI_WAYLAND_SUPPORT=On \
    -DCMAKE_BUILD_TYPE=Release \
    -DGLSLANG_INSTALL_DIR=$PKG/usr \
    -DVULKAN_HEADERS_INSTALL_DIR=$PKG/usr \
    -DSPIRV_HEADERS_INSTALL_DIR=$PKG/usr \
    -DBUILD_LAYER_SUPPORT_FILES=On \
    -DROBIN_HOOD_HASHING_INSTALL_DIR="$TMP/robin-hood-hashing-$ROBIN_HOOD_VERSION/build/install/usr" \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/Vulkan-ExtensionLayer-vulkan-sdk-$VULKAN_EXTENSIONLAYER_VERSION.tar.?z || exit 1
cd $TMP/Vulkan-ExtensionLayer-vulkan-sdk-$VULKAN_EXTENSIONLAYER_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_SYSCONFDIR=/etc \
    -DCMAKE_INSTALL_DATADIR=/share \
    -DCMAKE_SKIP_RPATH=True \
    -DBUILD_TESTS=Off \
    -DBUILD_WSI_XLIB_SUPPORT=On \
    -DBUILD_WSI_XCB_SUPPORT=On \
    -DBUILD_WSI_WAYLAND_SUPPORT=On \
    -DCMAKE_BUILD_TYPE=Release \
    -DVULKAN_HEADERS_INSTALL_DIR=$PKG/usr \
    -DBUILD_LAYER_SUPPORT_FILES=On \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/volk-vulkan-sdk-$VOLK_VERSION.tar.?z || exit 1
cd $TMP/volk-vulkan-sdk-$VOLK_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_SYSCONFDIR=/usr/share \
    -DVULKAN_HEADERS_INSTALL_DIR=$PKG/usr \
    -DVOLK_INSTALL=ON \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1
  sed -i "s|;/tmp/package-vulkan-sdk/usr/include||g" $PKG/usr/lib${LIBDIRSUFFIX}/cmake/volk/volkTargets.cmake

cd $TMP
tar xvf $CWD/Vulkan-Tools-vulkan-sdk-$VULKAN_TOOLS_VERSION.tar.?z || exit 1
cd $TMP/Vulkan-Tools-vulkan-sdk-$VULKAN_TOOLS_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DVULKAN_HEADERS_INSTALL_DIR=$PKG/usr \
    -DGLSLANG_INSTALL_DIR=$PKG/usr \
    -DVULKAN_LOADER_INSTALL_DIR=$PKG/usr \
    -DBUILD_WSI_WAYLAND_SUPPORT=On \
    ..

  # make uses glslangValidator, which is built against a shared
  # libglslang that isn't installed yet
  export LD_LIBRARY_PATH=$PKG/usr/lib$LIBDIRSUFFIX

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/jsoncpp-$JSONCPP_VERSION.tar.?z || exit 1
cd jsoncpp-$JSONCPP_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DBUILD_OBJECT_LIBS=OFF \
    -DBUILD_STATIC_LIBS=ON \
    -DBUILD_SHARED_LIBS=OFF \
    -DJSONCPP_WITH_TESTS=OFF \
    -DCMAKE_BUILD_TYPE=Release \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$TMP/jsoncpp-$JSONCPP_VERSION/build/install || exit 1

cd $TMP
tar xvf $CWD/valijson-$VALIJSON_VERSION.tar.?z || exit 1
cd valijson-$VALIJSON_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$TMP/valijson-$VALIJSON_VERSION/build/install || exit 1

cd $TMP
tar xvf $CWD/VulkanTools-vulkan-sdk-$VULKANTOOLS_VERSION.tar.?z || exit 1
cd $TMP/VulkanTools-vulkan-sdk-$VULKANTOOLS_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_SYSCONFDIR=/usr/share \
    -DVULKAN_HEADERS_INSTALL_DIR=$PKG/usr \
    -DVULKAN_REGISTRY_PATH_HINT=$PKG/usr \
    -DVULKAN_LOADER_INSTALL_DIR=$PKG/usr \
    -DVULKAN_VALIDATIONLAYERS_INSTALL_DIR=$PKG/usr \
    -Dvalijson_DIR="$TMP/valijson-$VALIJSON_VERSION/build/install/usr/lib$LIBDIRSUFFIX/cmake/valijson" \
    -Djsoncpp_DIR="$TMP/jsoncpp-$JSONCPP_VERSION/build/install/usr/lib$LIBDIRSUFFIX/cmake/jsoncpp" \
    -DBUILD_WSI_WAYLAND_SUPPORT=On \
    -DBUILD_TESTS=Off \
    -DINSTALL_GTEST=Off \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/shaderc-$SHADERC_VERSION.tar.?z || exit 1
cd $TMP/shaderc-$SHADERC_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

# Report correct versions in `glslc --version`
# git describe output collected in fetch-sources.sh
sed -i "s|\['git', 'describe'\]|\['cat', '.git-version'\]|" \
  utils/update_build_version.py

# We're pointing shaderc to the sources we just compiled
# This won't avoid compiling them again, but slightly better than
# extracting them twice.
# Short of polluting the build system with the libraries we built
# so far, there's no (easy) way to point shaderc to the already
# built versions.

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_SYSCONFDIR=/usr/share \
    -DSHADERC_SKIP_TESTS=On \
    -DSHADERC_SKIP_EXAMPLES=On \
    -DSHADERC_SPIRV_TOOLS_DIR=$TMP/glslang-vulkan-sdk-$GLSLANG_VERSION/External/spirv-tools \
    -DSHADERC_GLSLANG_DIR=$TMP/glslang-vulkan-sdk-$GLSLANG_VERSION \
    -DSKIP_GLSLANG_INSTALL=On \
    -DSKIP_SPIRV_TOOLS_INSTALL=On \
    -DBUILD_SHARED_LIBS=On \
    -DSPIRV_TOOLS_BUILD_STATIC=Off \
    -DBUILD_TESTING=Off \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/SPIRV-Cross-vulkan-sdk-$SPIRV_CROSS_VERSION.tar.?z || exit 1
cd $TMP/SPIRV-Cross-vulkan-sdk-$SPIRV_CROSS_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

# Set version
sed -i "s|version \"unknown\"|version \"$SPIRV_CROSS_VERSION\"|" \
  CMakeLists.txt

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DSPIRV_CROSS_ENABLE_TESTS=Off \
    -DSPIRV_CROSS_SHARED=On \
    -DSPIRV_CROSS_FORCE_PIC=On \
    -DCMAKE_DISABLE_FIND_PACKAGE_Git=ON \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/gfxreconstruct-vulkan-sdk-$GFXRECONSTRUCT_VERSION.tar.?z || exit 1
cd $TMP/gfxreconstruct-vulkan-sdk-$GFXRECONSTRUCT_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS -Wno-error=stringop-overflow" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/DirectXShaderCompiler-$DXC_VERSION.tar.?z || exit 1
cd $TMP/DirectXShaderCompiler-$DXC_VERSION

# This breaks the build, so skip it:
cat $CWD/DirectXShaderCompiler.noverify.patch | patch -p1 --verbose || exit 1

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build/docs
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS -Wno-error=stringop-truncation" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_INCLUDEDIR=include/dxc \
    -DLLVM_LIBDIR_SUFFIX=$LIBDIRSUFFIX \
    -DLLVM_BUILD_TOOLS="OFF" \
    -C"../cmake/caches/PredefinedParams.cmake" \
    -DHLSL_INCLUDE_TESTS="OFF" \
    ..

  make $NUMJOBS VERBOSE=1 || make VERBOSE=1 || exit 1

  # "make install" is essentially useless at this point
  # It installs a bunch of unnecessary llvm files
  # https://github.com/microsoft/DirectXShaderCompiler/issues/3276

  # install steps taken from appveyor.yml
  mkdir -p $PKG/usr/{bin,lib$LIBDIRSUFFIX,include}
  cp -P bin/dxc* $PKG/usr/bin/
  cp -P lib$LIBDIRSUFFIX/libdxcompiler.so* $PKG/usr/lib$LIBDIRSUFFIX/
  cp -r ../include/dxc $PKG/usr/include/

  # Remove CMakeLists.txt files in /usr/include
  find $PKG/usr/include/dxc -name "CMakeLists.txt" | xargs rm -f

cd $TMP
tar xvf $CWD/SPIRV-Reflect-vulkan-sdk-$SPIRV_REFLECT_VERSION.tar.?z || exit 1
cd $TMP/SPIRV-Reflect-vulkan-sdk-$SPIRV_REFLECT_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1

  mkdir -p $PKG/usr/include/SPIRV-Reflect/include/spirv/unified1

  install -m 644 ../spirv_reflect.c $PKG/usr/include/SPIRV-Reflect/
  install -m 644 ../spirv_reflect.h $PKG/usr/include/SPIRV-Reflect/
  install -m 644 ../include/spirv/unified1/spirv.h \
    $PKG/usr/include/SPIRV-Reflect/include/spirv/unified1/

cd $TMP
tar xvf $CWD/Vulkan-Profiles-vulkan-sdk-$VULKAN_PROFILES_VERSION.tar.?z || exit 1
cd $TMP/Vulkan-Profiles-vulkan-sdk-$VULKAN_PROFILES_VERSION

# do not depend on python-jsonschema
#sed -i "/jsonschema/d" scripts/gen_profiles_solution.py

# Fix indentation error:
#cat $CWD/Vulkan-Profiles-vulkan-sdk.indent.patch | patch -p1 --verbose || exit 1

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS -Wno-error=deprecated-declarations -I$PKG/usr/include/vulkan" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS -Wno-error=deprecated-declarations -I$PKG/usr/include/vulkan" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_SYSCONFDIR=/usr/share \
    -DVULKAN_LOADER_INSTALL_DIR=$PKG/usr \
    -DVULKAN_HEADERS_INSTALL_DIR=$PKG/usr \
    -DVULKAN_HEADERS_SOURCE_DIR="$TMP/Vulkan-Headers-vulkan-sdk-$VULKAN_HEADERS_VERSION" \
    -DVULKAN_VALIDATIONLAYERS_SOURCE_DIR="$TMP/Vulkan-ValidationLayers-vulkan-sdk-$VULKAN_VALIDATIONLAYERS_VERSION" \
    -DVVL_INCLUDE_DIR="$PKG/usr/include/vulkan" \
    -Dvalijson_DIR="$TMP/valijson-$VALIJSON_VERSION/build/install/usr/lib$LIBDIRSUFFIX/cmake/valijson" \
    -Djsoncpp_DIR="$TMP/jsoncpp-$JSONCPP_VERSION/build/install/usr/lib$LIBDIRSUFFIX/cmake/jsoncpp" \
    -DVulkan_INCLUDE_DIR="$PKG/usr/include/vulkan" \
    -DPROFILES_BUILD_TESTS=OFF \
    ..

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/VulkanMemoryAllocator-$VULKAN_MEMORY_ALLOCATOR_VERSION.tar.?z || exit 1
cd $TMP/VulkanMemoryAllocator-$VULKAN_MEMORY_ALLOCATOR_VERSION

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_SYSCONFDIR=/usr/share \
    -DVulkan_GLSLANG_VALIDATOR_EXECUTABLE=$PKG/usr/bin/glslangValidator \
    -DVulkan_GLSLC_EXECUTABLE=$PKG/usr/bin/glslc \
    -DVulkan_INCLUDE_DIR=$PKG/usr/include \
    -DVulkan_LIBRARY=$PKG/usr/lib$LIBDIRSUFFIX/libvulkan.so.$VULKAN_LOADER_VERSION \
    ..

  # make uses glslangValidator/glslc, which is built against a shared
  # libglslang that isn't installed yet
  export LD_LIBRARY_PATH=$PKG/usr/lib$LIBDIRSUFFIX

  make $NUMJOBS || make || exit 1
  make install DESTDIR=$PKG || exit 1

cd $TMP
tar xvf $CWD/VulkanCapsViewer-$VULKAN_CAPS_VIEWER_VERSION.tar.?z || exit 1
cd $TMP/VulkanCapsViewer-$VULKAN_CAPS_VIEWER_VERSION

# Fix finding Vulkan-Loader
sed -i "s|/lib/|/lib$LIBDIRSUFFIX/|g" CMakeLists.txt

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

mkdir build-x11
cd build-x11
qmake-qt5 .. \
  DEFINES+=X11 \
  CONFIG+=release \
  PREFIX=/usr || exit 1
  make $NUMJOBS || exit 1
  make INSTALL_ROOT=$PKG install || exit 1
  mv $PKG/usr/bin/vulkanCapsViewer $PKG/usr/bin/vulkanCapsViewer-x11
cd ..
 

mkdir build-wayland
cd build-wayland
qmake-qt5 .. \
  DEFINES+=WAYLAND \
  CONFIG+=release \
  PREFIX=/usr || exit 1
  make $NUMJOBS || exit 1
  make INSTALL_ROOT=$PKG install || exit 1
  mv $PKG/usr/bin/vulkanCapsViewer $PKG/usr/bin/vulkanCapsViewer-wayland
cd ..

ln -sf vulkanCapsViewer-x11 $PKG/usr/bin/vulkanCapsViewer

mkdir -p $PKG/usr/share/icons/hicolor/256x256/apps
cp -a gfx/android_icon_256.png $PKG/usr/share/icons/hicolor/256x256/apps/vulkanCapsViewer.png || exit 1

cd $TMP

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/SPIRV-Headers
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/SPIRV-Tools
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/glslang
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-Headers
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-Loader
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-ValidationLayers
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-ExtensionLayer
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-Tools
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/VulkanTools
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/shaderc
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/SPIRV-Cross
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/gfxreconstruct
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/DirectXShaderCompiler
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/SPIRV-Reflect
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-Profiles
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/volk
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-Utility-Libraries
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/VulkanCapsViewer
mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/VulkanMemoryAllocator
cp -a \
  SPIRV-Headers-$SPIRV_HEADERS_VERSION/LICENSE* \
  SPIRV-Headers-$SPIRV_HEADERS_VERSION/README* \
  $PKG/usr/doc/$PKGNAM-$VERSION/SPIRV-Headers
cp -a \
  glslang-vulkan-sdk-$GLSLANG_VERSION/External/spirv-tools/LICENSE* \
  glslang-vulkan-sdk-$GLSLANG_VERSION/External/spirv-tools/README* \
  glslang-vulkan-sdk-$GLSLANG_VERSION/External/spirv-tools/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/SPIRV-Tools
cp -a \
  glslang-vulkan-sdk-$GLSLANG_VERSION/LICENSE* \
  glslang-vulkan-sdk-$GLSLANG_VERSION/README* \
  glslang-vulkan-sdk-$GLSLANG_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/glslang
cp -a \
  Vulkan-Headers-vulkan-sdk-$VULKAN_HEADERS_VERSION/LICENSE* \
  Vulkan-Headers-vulkan-sdk-$VULKAN_HEADERS_VERSION/README* \
  Vulkan-Headers-vulkan-sdk-$VULKAN_HEADERS_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-Headers
cp -a \
  Vulkan-Loader-vulkan-sdk-$VULKAN_LOADER_VERSION/LICENSE* \
  Vulkan-Loader-vulkan-sdk-$VULKAN_LOADER_VERSION/README* \
  Vulkan-Loader-vulkan-sdk-$VULKAN_LOADER_VERSION/*.md \
  Vulkan-Loader-vulkan-sdk-$VULKAN_LOADER_VERSION/loader/LoaderAndLayerInterface.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-Loader
cp -a \
  Vulkan-ValidationLayers-vulkan-sdk-$VULKAN_VALIDATIONLAYERS_VERSION/LICENSE* \
  Vulkan-ValidationLayers-vulkan-sdk-$VULKAN_VALIDATIONLAYERS_VERSION/README* \
  Vulkan-ValidationLayers-vulkan-sdk-$VULKAN_VALIDATIONLAYERS_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-ValidationLayers
cp -a \
  Vulkan-ExtensionLayer-vulkan-sdk-$VULKAN_EXTENSIONLAYER_VERSION/LICENSE* \
  Vulkan-ExtensionLayer-vulkan-sdk-$VULKAN_EXTENSIONLAYER_VERSION/README* \
  Vulkan-ExtensionLayer-vulkan-sdk-$VULKAN_EXTENSIONLAYER_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-ExtensionLayer
cp -a \
  Vulkan-Tools-vulkan-sdk-$VULKAN_TOOLS_VERSION/LICENSE* \
  Vulkan-Tools-vulkan-sdk-$VULKAN_TOOLS_VERSION/README* \
  Vulkan-Tools-vulkan-sdk-$VULKAN_TOOLS_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-Tools
cp -a \
  VulkanTools-vulkan-sdk-$VULKANTOOLS_VERSION/LICENSE* \
  VulkanTools-vulkan-sdk-$VULKANTOOLS_VERSION/README* \
  VulkanTools-vulkan-sdk-$VULKANTOOLS_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/VulkanTools
cp -a \
  shaderc-$SHADERC_VERSION/AUTHORS \
  shaderc-$SHADERC_VERSION/LICENSE* \
  shaderc-$SHADERC_VERSION/README* \
  shaderc-$SHADERC_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/shaderc
cp -a \
  SPIRV-Cross-vulkan-sdk-$SPIRV_CROSS_VERSION/LICENSE* \
  SPIRV-Cross-vulkan-sdk-$SPIRV_CROSS_VERSION/README* \
  SPIRV-Cross-vulkan-sdk-$SPIRV_CROSS_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/SPIRV-Cross
cp -a \
  gfxreconstruct-vulkan-sdk-$GFXRECONSTRUCT_VERSION/LICENSE* \
  gfxreconstruct-vulkan-sdk-$GFXRECONSTRUCT_VERSION/README* \
  gfxreconstruct-vulkan-sdk-$GFXRECONSTRUCT_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/gfxreconstruct
cp -a \
  DirectXShaderCompiler-$DXC_VERSION/LICENSE* \
  DirectXShaderCompiler-$DXC_VERSION/README* \
  DirectXShaderCompiler-$DXC_VERSION/ThirdPartyNotices.txt \
  DirectXShaderCompiler-$DXC_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/DirectXShaderCompiler
cp -a \
  SPIRV-Reflect-vulkan-sdk-$SPIRV_REFLECT_VERSION/LICENSE* \
  SPIRV-Reflect-vulkan-sdk-$SPIRV_REFLECT_VERSION/README* \
  SPIRV-Reflect-vulkan-sdk-$SPIRV_REFLECT_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/SPIRV-Reflect
cp -a \
  Vulkan-Profiles-vulkan-sdk-$VULKAN_PROFILES_VERSION/LICENSE* \
  Vulkan-Profiles-vulkan-sdk-$VULKAN_PROFILES_VERSION/README* \
  Vulkan-Profiles-vulkan-sdk-$VULKAN_PROFILES_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-Profiles
cp -a \
  volk-vulkan-sdk-$VOLK_VERSION/LICENSE* \
  volk-vulkan-sdk-$VOLK_VERSION/README* \
  volk-vulkan-sdk-$VOLK_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/volk
cp -a \
  Vulkan-Utility-Libraries-vulkan-sdk-$VULKAN_UTILITY_LIBRARIES_VERSION/LICENSE* \
  Vulkan-Utility-Libraries-vulkan-sdk-$VULKAN_UTILITY_LIBRARIES_VERSION/README* \
  Vulkan-Utility-Libraries-vulkan-sdk-$VULKAN_UTILITY_LIBRARIES_VERSION/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/Vulkan-Utility-Libraries
cp -a \
  VulkanCapsViewer-$VULKAN_CAPS_VIEWER_VERSION/LICENSE* \
  VulkanCapsViewer-$VULKAN_CAPS_VIEWER_VERSION/README* \
  VulkanCapsViewer-$VULKAN_CAPS_VIEWER_VERSION/docs/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/VulkanCapsViewer
cp -a \
  VulkanMemoryAllocator-$VULKAN_MEMORY_ALLOCATOR_VERSION/LICENSE* \
  VulkanMemoryAllocator-$VULKAN_MEMORY_ALLOCATOR_VERSION/README* \
  VulkanMemoryAllocator-$VULKAN_MEMORY_ALLOCATOR_VERSION/docs/*.md \
  $PKG/usr/doc/$PKGNAM-$VERSION/VulkanMemoryAllocator

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $TMP/$PKGNAM-$VERSION-$ARCH-$BUILD.txz
