From 9643017460c221fed5689bcc55a41230200c40cc Mon Sep 17 00:00:00 2001
From: Simon Chopin <simon.chopin@canonical.com>
Date: Fri, 13 Aug 2021 16:47:57 +0200
Subject: build fix: Use conventional compiler attribute shorthand

The `__unused` macro has been used on Linux systems for this exact
purpose for ages. On the other hand, using the non-standard __unused__
breaks the build when compiling against glibc 2.34, as they use this
identifier internally.

Last-Update: 2021-08-13

Patch-Name: use-conventional-unused-marker.patch
---
 c.c        |  4 ++--
 eiffel.c   |  2 +-
 general.h  |  6 ++++--
 lregex.c   | 30 +++++++++++++++---------------
 lua.c      |  2 +-
 main.c     |  2 +-
 options.c  | 24 ++++++++++++------------
 parse.c    |  2 +-
 python.c   |  2 +-
 routines.c |  2 +-
 10 files changed, 39 insertions(+), 37 deletions(-)

diff --git a/c.c b/c.c
index 0cf0a14..c5d496b 100644
--- a/c.c
+++ b/c.c
@@ -619,7 +619,7 @@ static const char *keywordString (const keywordId keyword)
 	return name;
 }
 
-static void __unused__ pt (tokenInfo *const token)
+static void __unused pt (tokenInfo *const token)
 {
 	if (isType (token, TOKEN_NAME))
 		printf ("type: %-12s: %-13s   line: %lu\n",
@@ -634,7 +634,7 @@ static void __unused__ pt (tokenInfo *const token)
 			tokenString (token->type), token->lineNumber);
 }
 
-static void __unused__ ps (statementInfo *const st)
+static void __unused ps (statementInfo *const st)
 {
 	unsigned int i;
 	printf ("scope: %s   decl: %s   gotName: %s   gotParenName: %s\n",
diff --git a/eiffel.c b/eiffel.c
index e2f5a5c..67bfaa1 100644
--- a/eiffel.c
+++ b/eiffel.c
@@ -807,7 +807,7 @@ static void findKeyword (tokenInfo *const token, const keywordId keyword)
 
 static boolean parseType (tokenInfo *const token);
 
-static void parseGeneric (tokenInfo *const token, boolean declaration __unused__)
+static void parseGeneric (tokenInfo *const token, boolean declaration __unused)
 {
 	unsigned int depth = 0;
 #ifdef TYPE_REFERENCE_TOOL
diff --git a/general.h b/general.h
index 2d1d629..049e215 100644
--- a/general.h
+++ b/general.h
@@ -57,10 +57,12 @@
  *  to prevent warnings about unused variables.
  */
 #if (__GNUC__ > 2  ||  (__GNUC__ == 2  &&  __GNUC_MINOR__ >= 7)) && !defined (__GNUG__)
-# define __unused__  __attribute__((unused))
+# ifndef __unused
+#  define __unused  __attribute__((unused))
+# endif
 # define __printf__(s,f)  __attribute__((format (printf, s, f)))
 #else
-# define __unused__
+# define __unused
 # define __printf__(s,f)
 #endif
 
diff --git a/lregex.c b/lregex.c
index 37d7ea0..964508b 100644
--- a/lregex.c
+++ b/lregex.c
@@ -538,11 +538,11 @@ extern void findRegexTags (void)
 #endif  /* HAVE_REGEX */
 
 extern void addTagRegex (
-		const langType language __unused__,
-		const char* const regex __unused__,
-		const char* const name __unused__,
-		const char* const kinds __unused__,
-		const char* const flags __unused__)
+		const langType language __unused,
+		const char* const regex __unused,
+		const char* const name __unused,
+		const char* const kinds __unused,
+		const char* const flags __unused)
 {
 #ifdef HAVE_REGEX
 	Assert (regex != NULL);
@@ -564,10 +564,10 @@ extern void addTagRegex (
 }
 
 extern void addCallbackRegex (
-		const langType language __unused__,
-		const char* const regex __unused__,
-		const char* const flags __unused__,
-		const regexCallback callback __unused__)
+		const langType language __unused,
+		const char* const regex __unused,
+		const char* const flags __unused,
+		const regexCallback callback __unused)
 {
 #ifdef HAVE_REGEX
 	Assert (regex != NULL);
@@ -581,7 +581,7 @@ extern void addCallbackRegex (
 }
 
 extern void addLanguageRegex (
-		const langType language __unused__, const char* const regex __unused__)
+		const langType language __unused, const char* const regex __unused)
 {
 #ifdef HAVE_REGEX
 	if (! regexBroken)
@@ -602,7 +602,7 @@ extern void addLanguageRegex (
 */
 
 extern boolean processRegexOption (const char *const option,
-								   const char *const parameter __unused__)
+								   const char *const parameter __unused)
 {
 	boolean handled = FALSE;
 	const char* const dash = strchr (option, '-');
@@ -624,7 +624,7 @@ extern boolean processRegexOption (const char *const option,
 	return handled;
 }
 
-extern void disableRegexKinds (const langType language __unused__)
+extern void disableRegexKinds (const langType language __unused)
 {
 #ifdef HAVE_REGEX
 	if (language <= SetUpper  &&  Sets [language].count > 0)
@@ -639,8 +639,8 @@ extern void disableRegexKinds (const langType language __unused__)
 }
 
 extern boolean enableRegexKind (
-		const langType language __unused__,
-		const int kind __unused__, const boolean mode __unused__)
+		const langType language __unused,
+		const int kind __unused, const boolean mode __unused)
 {
 	boolean result = FALSE;
 #ifdef HAVE_REGEX
@@ -660,7 +660,7 @@ extern boolean enableRegexKind (
 	return result;
 }
 
-extern void printRegexKinds (const langType language __unused__, boolean indent __unused__)
+extern void printRegexKinds (const langType language __unused, boolean indent __unused)
 {
 #ifdef HAVE_REGEX
 	if (language <= SetUpper  &&  Sets [language].count > 0)
diff --git a/lua.c b/lua.c
index d385544..a2699c6 100644
--- a/lua.c
+++ b/lua.c
@@ -37,7 +37,7 @@ static kindOption LuaKinds [] = {
 */
 
 /* for debugging purposes */
-static void __unused__ print_string (char *p, char *q)
+static void __unused print_string (char *p, char *q)
 {
 	for ( ; p != q; p++)
 		fprintf (errout, "%c", *p);
diff --git a/main.c b/main.c
index 79948fe..38ce218 100644
--- a/main.c
+++ b/main.c
@@ -522,7 +522,7 @@ static void makeTags (cookedArgs *args)
  *		Start up code
  */
 
-extern int main (int __unused__ argc, char **argv)
+extern int main (int __unused argc, char **argv)
 {
 	cookedArgs *args;
 #ifdef VMS
diff --git a/options.c b/options.c
index ae773ef..029767c 100644
--- a/options.c
+++ b/options.c
@@ -730,7 +730,7 @@ static void processEtagsInclude (
 }
 
 static void processExcludeOption (
-		const char *const option __unused__, const char *const parameter)
+		const char *const option __unused, const char *const parameter)
 {
 	const char *const fileName = parameter + 1;
 	if (parameter [0] == '\0')
@@ -867,7 +867,7 @@ static void processFieldsOption (
 }
 
 static void processFilterTerminatorOption (
-		const char *const option __unused__, const char *const parameter)
+		const char *const option __unused, const char *const parameter)
 {
 	freeString (&Option.filterTerminator);
 	Option.filterTerminator = stringCopy (parameter);
@@ -929,8 +929,8 @@ static void printProgramIdentification (void)
 }
 
 static void processHelpOption (
-		const char *const option __unused__,
-		const char *const parameter __unused__)
+		const char *const option __unused,
+		const char *const parameter __unused)
 {
 	printProgramIdentification ();
 	putchar ('\n');
@@ -1138,8 +1138,8 @@ static void processLanguagesOption (
 }
 
 static void processLicenseOption (
-		const char *const option __unused__,
-		const char *const parameter __unused__)
+		const char *const option __unused,
+		const char *const parameter __unused)
 {
 	printProgramIdentification ();
 	puts ("");
@@ -1165,8 +1165,8 @@ static void processListKindsOption (
 }
 
 static void processListMapsOption (
-		const char *const __unused__ option,
-		const char *const __unused__ parameter)
+		const char *const __unused option,
+		const char *const __unused parameter)
 {
 	if (parameter [0] == '\0' || strcasecmp (parameter, "all") == 0)
 	    printLanguageMaps (LANG_AUTO);
@@ -1182,8 +1182,8 @@ static void processListMapsOption (
 }
 
 static void processListLanguagesOption (
-		const char *const option __unused__,
-		const char *const parameter __unused__)
+		const char *const option __unused,
+		const char *const parameter __unused)
 {
 	printLanguageList ();
 	exit (0);
@@ -1357,8 +1357,8 @@ static void processIgnoreOption (const char *const list)
 }
 
 static void processVersionOption (
-		const char *const option __unused__,
-		const char *const parameter __unused__)
+		const char *const option __unused,
+		const char *const parameter __unused)
 {
 	printProgramIdentification ();
 	exit (0);
diff --git a/parse.c b/parse.c
index 0b5e2c3..7e7361b 100644
--- a/parse.c
+++ b/parse.c
@@ -376,7 +376,7 @@ extern void freeParserResources (void)
 */
 
 extern void processLanguageDefineOption (
-		const char *const option, const char *const parameter __unused__)
+		const char *const option, const char *const parameter __unused)
 {
 #ifdef HAVE_REGEX
 	if (parameter [0] == '\0')
diff --git a/python.c b/python.c
index bf797de..f94e5de 100644
--- a/python.c
+++ b/python.c
@@ -135,7 +135,7 @@ static boolean isIdentifierCharacter (int c)
  * extract all relevant information and create a tag.
  */
 static void makeFunctionTag (vString *const function,
-	vString *const parent, int is_class_parent, const char *arglist __unused__)
+	vString *const parent, int is_class_parent, const char *arglist __unused)
 {
 	tagEntryInfo tag;
 	initTagEntry (&tag, vStringValue (function));
diff --git a/routines.c b/routines.c
index 8ebe2e0..c465626 100644
--- a/routines.c
+++ b/routines.c
@@ -526,7 +526,7 @@ static boolean isPathSeparator (const int c)
 
 #if ! defined (HAVE_STAT_ST_INO)
 
-static void canonicalizePath (char *const path __unused__)
+static void canonicalizePath (char *const path __unused)
 {
 #if defined (MSDOS_STYLE_PATH)
 	char *p;
