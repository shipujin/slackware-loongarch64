#!/bin/bash

# Copyright 2016, 2017, 2020  Eric Hameleers, Eindhoven, NL
# Copyright 2020, 2023, 2024  Patrick J. Volkerding, Sebeka, Minnesota, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=elogind
VERSION=${VERSION:-$(echo $PKGNAM-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)}
BUILD=${BUILD:-1}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i?86) ARCH=i586 ;;
    arm*) readelf /usr/bin/file -A | grep -E -q "Tag_CPU.*[4,5]" && ARCH=arm || ARCH=armv7hl ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *) ARCH=$(uname -m) ;;
  esac
  export ARCH
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD.txz"
  exit 0
fi

NUMJOBS=${NUMJOBS:-" -j $(expr $(nproc) + 1) "}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "armv7hl" ]; then
  SLKCFLAGS="-O3 -march=armv7-a -mfpu=vfpv3-d16"
  LIBDIRSUFFIX=""
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

TMP=${TMP:-/tmp}
PKG=$TMP/package-$PKGNAM

rm -rf $PKG
mkdir -p $TMP $PKG

cd $TMP
rm -rf $PKGNAM-$VERSION
tar xvf $CWD/$PKGNAM-$VERSION.tar.?z || exit 1
cd $PKGNAM-$VERSION || exit 1

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

# Once upon a time we were encouraged to go against long-standing UNIX
# traditions and use 99:99 for nobody:nogroup.
# This may have been a bad idea.
# But since to change this we'll have to dig through the system and make
# sure that nothing hardcodes 99:99, we'll leave it as-is for now.
# It's more than likely on the TODO list to change these back to
# 65534:65534, however.
# Meanwhile we'll at least change this from a sed to a patch.
# Always hated sed in these situations because the underlying code can change
# but sed will still happily scribble all over everything.
cat $CWD/elogind.nobody.nogroup.99.99.diff | patch -p1 --verbose || exit 1

# OK, here's the scoop on s2idle. After doing some digging, it looks like both
# Intel and AMD have stopped officially supporting S3 sleep (aka "deep") with
# the latest generation of CPUs (although it "might work"). I've also seen a
# few people say that S3 is "not secure"... which if you're worried that a
# three letter agency might grab your sleeping laptop and extract the contents
# of the RAM while keeping it powered up, well, maybe in that sense it isn't.
# As far as s2idle, I have heard that it has the potential to be as much of a
# low power mode as deep, but that depends on how low the IRQ rate gets. In
# practice I have heard of s2idle draining a battery in half a day.
#
# Anyway, I tried s2idle here again (with the below sleep patches) and it still
# locks up my machine (a fairly recent Thinkpad X1).
#
# S3 works and has the best power savings of all the partially-on modes.
# Feel free to edit /etc/elogind/sleep.conf.d/10-elogind.conf if s2idle works
# for you, but we'll continue to default to deep for now.
#
# Don't prefer s2idle, as it doesn't seem to work:
cat $CWD/11-prefer-deep-suspend.patch | patch -p1 --verbose || exit 1
cat $CWD/12-default-deep-suspend.patch | patch -p1 --verbose || exit 1

# Configure, build, and install:
export CFLAGS="$SLKCFLAGS"
export CXXFLAGS="$SLKCFLAGS"
mkdir meson-build
cd meson-build
meson setup \
  --buildtype=release \
  --prefix=/usr \
  --libdir=/lib${LIBDIRSUFFIX} \
  --libexecdir=/lib${LIBDIRSUFFIX}/elogind \
  -Dpkgconfiglibdir=/usr/lib${LIBDIRSUFFIX}/pkgconfig \
  -Dpamlibdir=/lib${LIBDIRSUFFIX}/security \
  -Dudevrulesdir="/lib/udev/rules.d" \
  -Ddocdir="/usr/doc/$PKGNAM-$VERSION" \
  -Dhtmldir="/usr/doc/$PKGNAM-$VERSION/html" \
  -Dmandir="/usr/man" \
  -Dman=enabled \
  -Dhtml=disabled \
  -Dbashcompletiondir="/usr/share/bash-completion/completions" \
  -Dnobody-user=nobody \
  -Dnobody-group=nogroup \
  -Dpam=enabled \
  -Dpamconfdir="/etc/pam.d" \
  -Dacl=enabled \
  -Dsmack=false \
  -Dutmp=true \
  -Ddefault-hierarchy=legacy \
  -Dcgroup-controller=elogind \
  -Dhalt-path=/sbin/halt \
  -Dpoweroff-path=/sbin/poweroff \
  -Dreboot-path=/sbin/reboot \
  -Ddefault-kill-user-processes=false \
  -Dmode=release \
  .. || exit 1
  "${NINJA:=ninja}" $NUMJOBS || exit 1
  DESTDIR=$PKG $NINJA install || exit 1
cd ..

# Create symlinks for elogind binaries to /bin/:
mkdir -p $PKG/bin
ln -sf /usr/bin/elogind-inhibit $PKG/bin/elogind-inhibit
ln -sf /usr/bin/loginctl $PKG/bin/loginctl

# Make sure we do not overwrite the user's customizations:
mv -i $PKG/etc/elogind/logind.conf{,.new}
mv -i $PKG/etc/elogind/sleep.conf{,.new}
mv -i $PKG/etc/elogind/sleep.conf.d/10-elogind.conf{,.new}
mv -i $PKG/etc/pam.d/elogind-user{,.new}

# Strip binaries:
find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Compress manual pages:
find $PKG/usr/man -type f -exec gzip -9 {} \+
for i in $( find $PKG/usr/man -type l ) ; do
  ln -s $( readlink $i ).gz $i.gz
  rm $i
done

# Add an rc script:
mkdir -p $PKG/etc/rc.d
cat $CWD/rc.elogind \
  | sed -e "s/@LIBDIRSUFFIX@/${LIBDIRSUFFIX}/g" \
  > $PKG/etc/rc.d/rc.elogind.new
chmod 755 $PKG/etc/rc.d/rc.elogind.new

# Create supported dirs in /etc/elogind/ (local config)
mkdir -p $PKG/etc/elogind/logind.conf.d/ $PKG/etc/elogind/sleep.conf.d/

# Add login1 policy file that allows users in the 'power' group
# to shutdown/reboot the computer:
mkdir -p $PKG/usr/share/polkit-1/rules.d
cat $CWD/10-enable-elogind-power.rules > $PKG/usr/share/polkit-1/rules.d/10-enable-session-power.rules

# We don't need the hidden files to make inferior package managers keep dirs:
find $PKG -type f -name ".keep_dir" -exec rm -f {} \;

# Add a documentation directory:
mkdir -p $PKG/usr/doc/${PKGNAM}-$VERSION
cp -a \
  AUTHORS* ChangeLog CHANGES COPYING* LICENSE* NEWS* README* THANKS* TODO* \
  $PKG/usr/doc/${PKGNAM}-$VERSION

# If there's a ChangeLog, installing at least part of the recent history
# is useful, but don't let it get totally out of control:
if [ -r ChangeLog ]; then
  DOCSDIR=$(echo $PKG/usr/doc/${PKGNAM}-$VERSION)
  cat ChangeLog | head -n 1000 > $DOCSDIR/ChangeLog
  touch -r ChangeLog $DOCSDIR/ChangeLog
fi

# If there's a CHANGES file, installing at least part of the recent history
# is useful, but don't let it get totally out of control:
if [ -r CHANGES ]; then
  DOCSDIR=$(echo $PKG/usr/doc/${PKGNAM}-$VERSION)
  cat CHANGES | head -n 1000 > $DOCSDIR/CHANGES
  touch -r CHANGES $DOCSDIR/CHANGES
fi

mkdir -p $PKG/install
zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $TMP/$PKGNAM-$VERSION-$ARCH-$BUILD.txz
