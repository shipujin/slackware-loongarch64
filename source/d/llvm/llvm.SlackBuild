#!/bin/bash

# Slackware build script for llvm

# Copyright 2008-2016 Heinz Wiesinger, Amsterdam, The Netherlands
# Copyright 2012, 2013, 2014, 2015, 2016, 2018  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=llvm
VERSION=${VERSION:-$(echo llvm-*.tar.xz | rev | cut -f 4- -d . | cut -f 1 -d - | rev)}
BUILD=${BUILD:-2}

NUMJOBS=${NUMJOBS:-" -j7 "}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD.txz"
  exit 0
fi

TMP=${TMP:-/tmp}
PKG=$TMP/package-$PKGNAM

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

rm -rf $PKG
mkdir -p $TMP $PKG
cd $TMP
rm -rf $PKGNAM-${VERSION}.src $PKGNAM-${VERSION}
tar xvf $CWD/$PKGNAM-$VERSION.src.tar.xz || exit 1

cd $PKGNAM-${VERSION}/tools || cd $PKGNAM-${VERSION}.src/tools || exit 1
  tar xvf $CWD/cfe-$VERSION.src.tar.xz || exit 1
  mv cfe-${VERSION} clang 2>/dev/null || mv cfe-${VERSION}.src clang || exit 1
  tar xvf $CWD/lldb-$VERSION.src.tar.xz || exit 1
  mv lldb-${VERSION} lldb 2>/dev/null || mv lldb-${VERSION}.src lldb || exit 1
cd ../

cd tools/clang/tools || exit 1
  tar xvf $CWD/clang-tools-extra-$VERSION.src.tar.xz || exit 1
  mv clang-tools-extra-${VERSION} extra 2>/dev/null \
    || mv clang-tools-extra-${VERSION}.src extra || exit 1
cd ../../../

cd projects || exit 1
  tar xvf $CWD/compiler-rt-$VERSION.src.tar.xz || exit 1
  mv compiler-rt-${VERSION} compiler-rt 2>/dev/null \
    || mv compiler-rt-${VERSION}.src compiler-rt || exit 1
  tar xvf $CWD/openmp-$VERSION.src.tar.xz || exit 1
  mv openmp-${VERSION} openmp 2>/dev/null \
    || mv openmp-${VERSION}.src openmp || exit 1
  tar xvf $CWD/libcxx-${VERSION}.src.tar.xz || exit 1
  mv libcxx-${VERSION} libcxx 2>/dev/null \
    || mv libcxx-${VERSION}.src libcxx || exit 1
  tar xvf $CWD/libcxxabi-${VERSION}.src.tar.xz || exit 1
  mv libcxxabi-${VERSION} libcxxabi 2>/dev/null \
    || mv libcxxabi-${VERSION}.src libcxxabi || exit 1
cd ../

# Support GCC built for i586-slackware-linux:
zcat $CWD/clang.toolchains.i586.triple.diff.gz | patch -p1 --verbose || exit 1

## This seems obsolete, so commenting it out:
#
## Use i586 $ARCH on 32-bit x86:
#sed -r "/ifeq.*CompilerTargetArch/s#i386#i586#g" \
#  -i projects/compiler-rt/make/platform/clang_linux.mk

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \; -o \
  \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \;

# Work around https://llvm.org/bugs/show_bug.cgi?id=30587
# by building clang with shared libs
zcat $CWD/n_clang_allow_BUILD_SHARED_LIBRARY.patch.gz | patch -p0 --verbose || exit 1

# need to disable assertions to make llvm thread-safe
# clang resource dir is a relative path based on the location of the clang binary
mkdir build
cd build
  cmake \
    -DCMAKE_C_COMPILER="clang" \
    -DCMAKE_CXX_COMPILER="clang++" \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DLLVM_LIBDIR_SUFFIX=${LIBDIRSUFFIX} \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=OFF \
    -DCLANG_BUILD_SHARED_LIBS=ON \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_USE_OPROFILE=ON \
    -DLLVM_BINUTILS_INCDIR=/usr/include \
    -DCLANG_RESOURCE_DIR="../lib${LIBDIRSUFFIX}/clang/${VERSION}" \
    .. || exit 1

  # breaks with one of the patches above. Maybe revisit later
  # -DBUILD_SHARED_LIBS=ON \

  make $NUMJOBS VERBOSE=1 || make || exit 1
  make install DESTDIR=$PKG || exit 1
cd ..

# Add symlinks for $ARCH-slackware-linux-{clang,clang++}:
( cd $PKG/usr/bin
  ln -sf clang $ARCH-slackware-linux-clang
  ln -sf clang++ $ARCH-slackware-linux-clang++
)

# install clang-static-analyzer
for i in ccc c++; do
  ln -s /usr/libexec/$i-analyzer \
    $PKG/usr/bin/$i-analyzer || exit 1
done

# Remove symlink to libgomp, which is already provided by gcc
rm -f $PKG/usr/lib$LIBDIRSUFFIX/libgomp.so

# Install Python bindings
for pyver in 2.7 3.6; do
  mkdir -p "$PKG/usr/lib$LIBDIRSUFFIX/python$pyver/site-packages"
  cp -a tools/clang/bindings/python/clang "$PKG/usr/lib$LIBDIRSUFFIX/python$pyver/site-packages/"
done

# Remove bundled python-six
rm -f "$PKG/usr/lib$LIBDIRSUFFIX/python2.7/site-packages/six.py"

# Compile Python scripts
python -m compileall "$PKG/usr/lib$LIBDIRSUFFIX/python2.7/site-packages/clang"
python -O -m compileall "$PKG/usr/lib$LIBDIRSUFFIX/python2.7/site-packages/clang"
python3 -m compileall "$PKG/usr/lib$LIBDIRSUFFIX/python3.6/site-packages/clang"
python3 -O -m compileall "$PKG/usr/lib$LIBDIRSUFFIX/python3.6/site-packages/clang"
python -m compileall "$PKG/usr/lib$LIBDIRSUFFIX/python2.7/site-packages/lldb"
python -O -m compileall "$PKG/usr/lib$LIBDIRSUFFIX/python2.7/site-packages/lldb"
python -m compileall "$PKG/usr/share/scan-view"
python -O -m compileall "$PKG/usr/share/scan-view"
python -m compileall "$PKG/usr/share/clang"
python -O -m compileall "$PKG/usr/share/clang"
python -m compileall "$PKG/usr/share/opt-viewer"
python -O -m compileall "$PKG/usr/share/opt-viewer"

# Move man page directory:
mv $PKG/usr/share/man $PKG/usr/

# Strip binaries:
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

# Compress manual pages:
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do
  ln -s $( readlink $i ).gz $i.gz
  rm $i
done

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/{clang,lldb,clang-tools-extra,compiler-rt,openmp}
cp -a CREDITS* LICENSE* README* $PKG/usr/doc/$PKGNAM-$VERSION
cp -a tools/clang/{INSTALL,LICENSE,NOTES,README}* \
  $PKG/usr/doc/$PKGNAM-$VERSION/clang
cp -a tools/lldb/{CODE_OWNERS,INSTALL,LICENSE}* \
  $PKG/usr/doc/$PKGNAM-$VERSION/lldb
cp -a tools/clang/tools/extra/{CODE_OWNERS,LICENSE,README}* \
  $PKG/usr/doc/$PKGNAM-$VERSION/clang-tools-extra
cp -a projects/compiler-rt/{CODE_OWNERS,CREDITS,LICENSE,README}* \
  $PKG/usr/doc/$PKGNAM-$VERSION/compiler-rt
cp -a projects/openmp/{CREDITS,LICENSE}* \
  $PKG/usr/doc/$PKGNAM-$VERSION/openmp
mv $PKG/usr/docs/llvm/* $PKG/usr/doc/$PKGNAM-$VERSION
rm -rf $PKG/usr/docs

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $TMP/$PKGNAM-$VERSION-$ARCH-$BUILD.txz

