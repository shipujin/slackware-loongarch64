#!/bin/bash
set -x

# Slackware build script for llvm

# Copyright 2008-2016 Heinz Wiesinger, Amsterdam, The Netherlands
# Copyright 2012, 2013, 2014, 2015, 2016, 2018, 2019, 2020, 2021, 2022  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=llvm
VERSION=${VERSION:-$(echo llvm-*.tar.xz | rev | cut -f 4- -d . | cut -f 1 -d - | rev)}
BUILD=${BUILD:-3}

# For the two options below, either set both to OFF or *only one* to ON:

# Build using -DBUILD_SHARED_LIBS=ON.
# While this is not the officially recommended way to build LLVM, it produces
# a smaller package and the compiler seems to be reliable when built this way.
BUILD_SHARED_LIBS=${BUILD_SHARED_LIBS:=ON}

# Build using -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_LINK_LLVM_DYLIB=ON -DCLANG_LINK_CLANG_DYLIB=ON:
# This is the recommended way to built LLVM with shared libraries, however
# the resulting package is twice as large and also wasn't able to build
# Firefox or Thunderbird here. If you rebuild LLVM with this option, you'll
# also need to recompile spirv-llvm-translator, mesa, and possibly other
# third party packages. The resulting compiler has not been reliable here.
# I would not recommend using this option, but feel free to try it.
LLVM_BUILD_LLVM_DYLIB=${LLVM_BUILD_LLVM_DYLIB:=OFF}

NUMJOBS=${NUMJOBS:-" -j$(expr $(nproc) + 1) "}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
    loongarch64) ARCH=loong64 ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# Building clangd will be determined automatically unless BUILD_CLANG is
# preset to YES or NO:
if [ -z $BUILD_CLANGD ]; then
  if [ "$ARCH" = "i586" -o "$ARCH" = "i686" ]; then
    BUILD_CLANGD=NO
  else
    BUILD_CLANGD=YES
  fi
fi
if [ "$BUILD_CLANGD" = "NO" ]; then
  CLANGD="-DCLANG_ENABLE_CLANGD=OFF"
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD.txz"
  exit 0
fi

TMP=${TMP:-/tmp}
PKG=$TMP/package-$PKGNAM
BUILDDIR=${TMP}/llvm-build-${VERSION}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "loong64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
  CMAKE_EXTRA=" -DLLVM_HOST_TRIPLE=loongarch64-slackware-linux"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

# Python2 short version:
PY2=$(python -c 'from distutils.sysconfig import get_python_lib; print(get_python_lib())' | cut -f 2 -d n | cut -f 1 -d /)
# Python3 short version:
PY3=$(python3 -c 'from distutils.sysconfig import get_python_lib; print(get_python_lib())' | cut -f 2 -d n | cut -f 1 -d /)

# Sadly, glibc-2.30 exposed some sort of problem with clang and icecream.
# The symptom is a compile failure that says none of the types in
# <linux/types.h> are defined, even though they are. gcc/g++ seem unaffected.
# For now, not much choice other than to disable this.
# Don't use icecream:
#PATH=$(echo $PATH | sed "s|/usr/libexec/icecc/bin||g" | tr -s : | sed "s/^://g" | sed "s/:$//g")

rm -rf $PKG $BUILDDIR
mkdir -p $TMP $PKG $BUILDDIR
cd $BUILDDIR

# Add a fake configure script so the cleanup script used here at Slackware
# knows to delete this stuff later. Other folks can just ignore this... it
# doesn't have any other purpose.
touch configure
chmod 755 configure

rm -rf $PKGNAM-${VERSION}.src $PKGNAM-${VERSION}
tar xvf $CWD/$PKGNAM-$VERSION.src.tar.xz || exit 1

cd $PKGNAM-${VERSION}.src/tools || cd $PKGNAM-${VERSION}/tools || exit 1
  tar xvf $CWD/clang-$VERSION.src.tar.xz || exit 1
  mv clang-${VERSION} clang 2>/dev/null || mv clang-${VERSION}.src clang || exit 1
  zcat $CWD/clang-14-add-loongarch64-support.patch.gz | patch -p1 --verbose || exit 1
  #tar xvf $CWD/flang-$VERSION.src.tar.xz || exit 1
  #mv flang-${VERSION} flang 2>/dev/null || mv flang-${VERSION}.src flang || exit 1
#  tar xvf $CWD/lldb-$VERSION.src.tar.xz || exit 1
#  mv lldb-${VERSION} lldb 2>/dev/null || mv lldb-${VERSION}.src lldb || exit 1
#  tar xvf $CWD/lld-$VERSION.src.tar.xz || exit 1
#  mv lld-${VERSION} lld 2>/dev/null || mv lld-${VERSION}.src lld || exit 1
cd ../

cd tools/clang/tools || exit 1
#  tar xvf $CWD/clang-tools-extra-$VERSION.src.tar.xz || exit 1
#  mv clang-tools-extra-${VERSION} extra 2>/dev/null \
#    || mv clang-tools-extra-${VERSION}.src extra || exit 1
#  # HACK # Otherwise the build fails because files aren't found.
#  rm -rf $TMP/clang-tools-extra
#  cp -a extra $TMP/clang-tools-extra
cd ../../../

cd projects || exit 1
#  tar xvf $CWD/compiler-rt-$VERSION.src.tar.xz || exit 1
#  mv compiler-rt-${VERSION} compiler-rt 2>/dev/null || mv compiler-rt-${VERSION}.src compiler-rt || exit 1
#  tar xvf $CWD/openmp-$VERSION.src.tar.xz || exit 1
#  mv openmp-${VERSION} openmp 2>/dev/null || mv openmp-${VERSION}.src openmp || exit 1
#  tar xvf $CWD/libcxx-${VERSION}.src.tar.xz || exit 1
#  mv libcxx-${VERSION} libcxx 2>/dev/null || mv libcxx-${VERSION}.src libcxx || exit 1
#  tar xvf $CWD/libcxxabi-${VERSION}.src.tar.xz || exit 1
#  mv libcxxabi-${VERSION} libcxxabi 2>/dev/null || mv libcxxabi-${VERSION}.src libcxxabi || exit 1
#  tar xvf $CWD/polly-$VERSION.src.tar.xz || exit 1
#  mv polly-${VERSION} polly 2>/dev/null || mv polly-${VERSION}.src polly || exit 1
#  # We just need a header file from this...
#  tar xvf $CWD/libunwind-${VERSION}.src.tar.xz || exit 1
#  mv libunwind-${VERSION}.src libunwind || mv libunwind-${VERSION} libunwind || exit 1
cd ../

# Support GCC built for i586-slackware-linux:
zcat $CWD/clang.toolchains.i586.triple.diff.gz | patch -p1 --verbose || exit 1

## Hack to fix build with polly. Maybe we should just not use polly... ?
#zcat $CWD/llvm.polly.hack.diff.gz | patch -p1 --verbose || exit 1

# We require libatomic on 32-bit platforms:
if [ "$ARCH" = "i586" -o "$ARCH" = "i686" ]; then
  zcat $CWD/lldb.32-bit.link.libatomic.diff.gz | patch -p1 --verbose || exit 1
fi

zcat $CWD/llvm-14-add-loongarch64-support.patch.gz | patch -p2 --verbose || exit 

# Won't build without this. See https://github.com/llvm/llvm-project/issues/54941
#zcat $CWD/llvm.bypass.broken.benchmarks.diff.gz | patch -p1 --verbose || exit 1

## Patch to fix build with glibc-2.36:
#zcat $CWD/llvm.sanitizer_platform_limits_posix.cpp.glibc-2.36.diff.gz | patch -p1 --verbose || exit 1

# These hackish links seem to be required...
cd ..
ln -sf */utils/gn/secondary/third-party .
#ln -sf */runtimes .
#ln -sf */projects/libcxx .
#ln -sf */projects/libcxxabi .
cd -

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

# Collect shared library options. If both of the configurable options are set
# to ON, the last one we check will be the one we use.
if [ "$BUILD_SHARED_LIBS" = "ON" ]; then
  SHARED_LIBRARY_OPTIONS="-DBUILD_SHARED_LIBS=ON"
fi
if [ "$LLVM_BUILD_LLVM_DYLIB" = "ON" ]; then
  SHARED_LIBRARY_OPTIONS="-DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_LINK_LLVM_DYLIB=ON -DCLANG_LINK_CLANG_DYLIB=ON"
fi

mkdir build
cd build
  mkdir include
  # Copy this LLVM libunwind header or it won't be found:
  cp -a ../projects/libunwind/include/mach-o include
  # Nuke LLVM libunwind as it conflicts with the one already on the system:
  rm -r ../projects/libunwind
  cmake -GNinja \
    -DCMAKE_C_COMPILER="gcc" \
    -DCMAKE_CXX_COMPILER="g++" \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DLLVM_LIBDIR_SUFFIX=${LIBDIRSUFFIX} \
    -DCMAKE_BUILD_TYPE=Release \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DCLANG_LINK_CLANG_DYLIB=ON \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_INSTALL_UTILS=ON \
    -DLLVM_BINUTILS_INCDIR=/usr/include \
    -DCLANG_RESOURCE_DIR="../lib${LIBDIRSUFFIX}/clang/${VERSION}" \
    -DLLVM_TARGETS_TO_BUILD= \
    -DLLVM_TARGET_ARCH=LoongArch \
    -DLLDB_USE_SYSTEM_SIX=1 \
    -DLLVM_INCLUDE_BENCHMARKS=OFF \
    -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
    $CLANGD \
    $CMAKE_EXTRA \
    ..  || exit 1

  "${NINJA:=ninja}" $NUMJOBS || exit 1
  DESTDIR=$PKG "$NINJA" install || exit 1
cd ..

# Add symlinks for $ARCH-slackware-linux-{clang,clang++}:
( cd $PKG/usr/bin
  ln -sf clang loongarch64-slackware-linux-clang
  ln -sf clang++ loongarch64-slackware-linux-clang++
)

# Install clang-static-analyzer:
for i in ccc c++; do
  ln -s /usr/libexec/$i-analyzer \
    $PKG/usr/bin/$i-analyzer || exit 1
done

# Ensure lit-cpuid is installed:
if [ ! -r $PKG/usr/bin/lit-cpuid ]; then
  cp -a build/bin/lit-cpuid $PKG/usr/bin/lit-cpuid
  chown root:root $PKG/usr/bin/lit-cpuid
  chmod 755 $PKG/usr/bin/lit-cpuid
fi
# Remove symlink to libgomp, which is already provided by gcc:
rm -f $PKG/usr/lib$LIBDIRSUFFIX/libgomp.so

# Install Python bindings:
for pyver in ${PY2} ${PY3}; do
  mkdir -p "$PKG/usr/lib$LIBDIRSUFFIX/python$pyver/site-packages"
  cp -a tools/clang/bindings/python/clang "$PKG/usr/lib$LIBDIRSUFFIX/python$pyver/site-packages/"
done

# Remove bundled python-six:
rm -f "$PKG/usr/lib$LIBDIRSUFFIX/python${PY2}/site-packages/six.py"

# Compile Python scripts:
python -m compileall "$PKG/usr/lib$LIBDIRSUFFIX/python${PY2}/site-packages/clang"
python -O -m compileall "$PKG/usr/lib$LIBDIRSUFFIX/python${PY2}/site-packages/clang"
python3 -m compileall "$PKG/usr/lib$LIBDIRSUFFIX/python${PY3}/site-packages/clang"
python3 -O -m compileall "$PKG/usr/lib$LIBDIRSUFFIX/python${PY3}/site-packages/clang"
python -m compileall "$PKG/usr/lib$LIBDIRSUFFIX/python${PY2}/site-packages/lldb"
python -O -m compileall "$PKG/usr/lib$LIBDIRSUFFIX/python${PY2}/site-packages/lldb"
python -m compileall "$PKG/usr/share/scan-view"
python -O -m compileall "$PKG/usr/share/scan-view"
python -m compileall "$PKG/usr/share/clang"
python -O -m compileall "$PKG/usr/share/clang"
python -m compileall "$PKG/usr/share/opt-viewer"
python -O -m compileall "$PKG/usr/share/opt-viewer"

# Move man page directory:
mv $PKG/usr/share/man $PKG/usr/

# Strip binaries:
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

# Compress manual pages:
find $PKG/usr/man -type f -exec gzip -9 {} \+
for i in $( find $PKG/usr/man -type l ) ; do
  ln -s $( readlink $i ).gz $i.gz
  rm $i
done

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/{clang,lldb,clang-tools-extra,compiler-rt,openmp,polly}
cp -a CREDITS* LICENSE* README* $PKG/usr/doc/$PKGNAM-$VERSION
cp -a tools/clang/{INSTALL,LICENSE,NOTES,README}* \
  $PKG/usr/doc/$PKGNAM-$VERSION/clang
cp -a tools/lldb/{CODE_OWNERS,INSTALL,LICENSE}* \
  $PKG/usr/doc/$PKGNAM-$VERSION/lldb
cp -a tools/clang/tools/extra/{CODE_OWNERS,LICENSE,README}* \
  $PKG/usr/doc/$PKGNAM-$VERSION/clang-tools-extra
cp -a projects/compiler-rt/{CODE_OWNERS,CREDITS,LICENSE,README}* \
  $PKG/usr/doc/$PKGNAM-$VERSION/compiler-rt
cp -a projects/openmp/{CREDITS,LICENSE}* \
  $PKG/usr/doc/$PKGNAM-$VERSION/openmp
cp -a projects/polly/{CREDITS,LICENSE,README}* \
  $PKG/usr/doc/$PKGNAM-$VERSION/polly
mv $PKG/usr/docs/llvm/* $PKG/usr/doc/$PKGNAM-$VERSION
rm -rf $PKG/usr/docs

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $TMP/$PKGNAM-$VERSION-$ARCH-$BUILD.txz
