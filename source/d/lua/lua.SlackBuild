#!/bin/sh

# Slackware build script for Lua

# Written by Menno Duursma
# Modified by the SlackBuilds.org project
# Modified by Aaron W. Hsu
# Updated by Matteo Bernardini
# Upgraded by Patrick Volkerding

# This program is free software. It comes without any warranty.
# Granted WTFPL, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=lua
VERSION=${VERSION:-$(echo $PKGNAM-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)}
BUILD=${BUILD:-4}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i?86) ARCH=i586 ;;
    arm*) readelf /usr/bin/file -A | egrep -q "Tag_CPU.*[4,5]" && ARCH=arm || ARCH=armv7hl ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *) ARCH=$(uname -m) ;;
  esac
  export ARCH
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD.txz"
  exit 0
fi

CWD=$(pwd)
TMP=${TMP:-/tmp}
PKG=$TMP/package-$PKGNAM

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "armv7hl" ]; then
  SLKCFLAGS="-O3 -march=armv7-a -mfpu=vfpv3-d16"
  LIBDIRSUFFIX=""
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

rm -rf $PKG
mkdir -p $PKG $TMP
cd $TMP
rm -rf $PKGNAM-$VERSION
tar xvf $CWD/$PKGNAM-${VERSION}.tar.?z || exit 1
cd $PKGNAM-$VERSION
chown -R root:root .

# Fix up a to-be-installed header:
sed -i "s|/usr/local|/usr|" src/luaconf.h
sed -i "s|lib/lua|lib$LIBDIRSUFFIX/lua|" src/luaconf.h

make linux \
  MYCFLAGS="$SLKCFLAGS" \
  INSTALL_TOP=/usr \
  INSTALL_LIB=/usr/lib${LIBDIRSUFFIX} \
  INSTALL_LMOD=/usr/share/lua/$(echo $VERSION | cut -f 1-2 -d .) \
  INSTALL_CMOD=/usr/lib${LIBDIRSUFFIX}/lua/$(echo $VERSION | cut -f 1-2 -d .) || exit 1

make linux install \
  MYCFLAGS="$SLKCFLAGS" \
  INSTALL_TOP=$PKG/usr \
  INSTALL_LIB=$PKG/usr/lib${LIBDIRSUFFIX} \
  INSTALL_LMOD=$PKG/usr/share/lua/$(echo $VERSION | cut -f 1-2 -d .) \
  INSTALL_CMOD=$PKG/usr/lib${LIBDIRSUFFIX}/lua/$(echo $VERSION | cut -f 1-2 -d .) || exit 1

# Now let's build the shared library
mkdir -p shared
cd shared
  ar -x $PKG/usr/lib${LIBDIRSUFFIX}/liblua.a || exit 1
  gcc -ldl -lreadline -lhistory -lncurses -lm -shared *.o -o liblua.so.$VERSION || exit 1
  cp -a liblua.so.$VERSION $PKG/usr/lib${LIBDIRSUFFIX} || exit 1
  ( cd $PKG/usr/lib${LIBDIRSUFFIX}
    ln -s liblua.so.$VERSION liblua.so.$(echo $VERSION | cut -f 1-2 -d .)
    ln -s liblua.so.$VERSION liblua.so.$(echo $VERSION | cut -f 1 -d .)
    ln -s liblua.so.$VERSION liblua.so
  )
cd ..

## On second thought, this *might* be useful
## Don't ship the static library:
#rm -f $PKG/usr/lib${LIBDIRSUFFIX}/liblua.a

# and install the pkgconfig file
mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}/pkgconfig
cat $CWD/lua.pc | sed "s/%V%/$(echo $VERSION | cut -f 1-2 -d .)/g" | sed "s/%R%/$VERSION/g" | sed "s/%LIBDIRSUFFIX%/$LIBDIRSUFFIX/g" > $PKG/usr/lib${LIBDIRSUFFIX}/pkgconfig/lua.pc

find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/{extras,html}
cp -a COPYRIGHT* HISTORY* INSTALL* README* $PKG/usr/doc/$PKGNAM-$VERSION
cp -a doc/*.html doc/logo.gif doc/lua.css $PKG/usr/doc/$PKGNAM-$VERSION/html
cp -a etc test $PKG/usr/doc/$PKGNAM-$VERSION/extras

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $TMP/$PKGNAM-$VERSION-$ARCH-$BUILD.txz
