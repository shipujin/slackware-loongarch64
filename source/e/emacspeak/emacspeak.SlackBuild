#!/bin/sh
# Copyright 2006, 2008, 2010, 2011, 2020, 2024  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=emacspeak
VERSION=${VERSION:-$(echo $PKGNAM-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)}
BUILD=${BUILD:-1}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) export ARCH=i586 ;;
    arm*) export ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
       *) export ARCH=$( uname -m ) ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD.txz"
  exit 0
fi

if [ "$TMP" = "" ]; then
  TMP=/tmp
fi

PKG=$TMP/package-${PKGNAM}
rm -rf $PKG
mkdir -p $PKG/usr/info

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "armv7hl" ]; then
  SLKCFLAGS="-O3 -march=armv7-a -mfpu=vfpv3-d16"
  LIBDIRSUFFIX=""
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

cd $TMP
rm -rf ${PKGNAM}-${VERSION}
tar xvf $CWD/${PKGNAM}-$VERSION.tar.?z || exit 1
cd ${PKGNAM}-$VERSION || exit 1

# Make sure ownerships and permissions are sane:
chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 700 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

# Remove dangling symlinks:
find . -xtype l -exec rm -f {} \;

# Compile the main program against Emacs:
make config && make
if [ ! -r info/emacspeak.info ]; then
  makeinfo -o info/ info/emacspeak.texi
fi

# Build espeak server if espeak or espeak-ng are installed:
if [ -e /usr/bin/espeak ]; then
  make espeak || exit 1
fi

# Install (there is no longer a "make install" feature...):
mkdir -p $PKG/usr/share/emacs/site-lisp
cp -a $TMP/${PKGNAM}-${VERSION} $PKG/usr/share/emacs/site-lisp/emacspeak
mv $PKG/usr/share/emacs/site-lisp/emacspeak/info/*.info* $PKG/usr/info
rm -rf $PKG/usr/share/emacs/site-lisp/emacspeak/info
# Create an emacspeak run script:
mkdir -p $PKG/usr/bin
cat << EOF > $PKG/usr/bin/emacspeak
#!/bin/sh
# Start emacspeak.
# Default to using espeak unless DTK_PROGRAM is set.
#
:\${DTK_PROGRAM} ? "Using \${DTK_PROGRAM}" : export DTK_PROGRAM="espeak"
if [ ! -e /usr/bin/espeak -a "\$DTK_PROGRAM" = "espeak" ]; then
  echo "espeak (or espeak-ng) not installed. Please set a supported speech server like this:"
  echo "  export DTK_PROGRAM=<speech engine>"
  echo "Then re-run this script."
fi
if [ -d \$HOME/.emacs.d/init.el ]; then
  emacs -q -l /usr/share/emacs/site-lisp/emacspeak/lisp/emacspeak-setup.el -l \$HOME/.emacs.d/init.el \$*
else
  emacs -q -l /usr/share/emacs/site-lisp/emacspeak/lisp/emacspeak-setup.el \$*
fi
EOF
chown root:root $PKG/usr/bin/emacspeak
chmod 755 $PKG/usr/bin/emacspeak

# Strip binaries:
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Compress info files, if any:
if [ -d $PKG/usr/info ]; then
  ( cd $PKG/usr/info
    rm -f dir
    gzip -9 *
  )
fi

# Add a documentation directory:
mkdir -p $PKG/usr/doc/${PKGNAM}-$VERSION
( cd $PKG/usr/doc/${PKGNAM}-$VERSION
  ln -sf /usr/share/emacs/site-lisp/emacspeak/etc .
  ln -sf etc/COPYRIGHT .
  ln -sf etc/NEWS .
  ln -sf /usr/share/emacs/site-lisp/emacspeak/README.md .
  ln -sf /usr/share/emacs/site-lisp/emacspeak/blog-archive .
)

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $TMP/package-${PKGNAM}
makepkg -l y -c n ../${PKGNAM}-$VERSION-$ARCH-$BUILD.txz
