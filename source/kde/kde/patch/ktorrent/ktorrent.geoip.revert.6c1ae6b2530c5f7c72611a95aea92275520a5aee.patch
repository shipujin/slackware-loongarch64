--- ./plugins/infowidget/GeoIP.h.orig	2021-08-15 00:18:01.329498947 -0500
+++ ./plugins/infowidget/GeoIP.h	2021-08-15 00:18:01.329498947 -0500
@@ -0,0 +1,148 @@
+/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 2; tab-width: 2 -*- */
+/* GeoIP.h
+
+    SPDX-FileCopyrightText: 2003 MaxMind LLC
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#ifndef GEOIP_H
+#define GEOIP_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/stat.h> /* for fstat */
+#include <sys/types.h> /* for fstat */
+
+#define SEGMENT_RECORD_LENGTH 3
+#define STANDARD_RECORD_LENGTH 3
+#define ORG_RECORD_LENGTH 4
+#define MAX_RECORD_LENGTH 4
+#define NUM_DB_TYPES 16
+
+typedef struct GeoIPTag {
+    FILE *GeoIPDatabase;
+    char *file_path;
+    unsigned char *cache;
+    unsigned char *index_cache;
+    unsigned int *databaseSegments;
+    char databaseType;
+    time_t mtime;
+    int flags;
+    char record_length;
+    int record_iter; /* used in GeoIP_next_record */
+} GeoIP;
+
+typedef struct GeoIPRegionTag {
+    char country_code[3];
+    char region[3];
+} GeoIPRegion;
+
+typedef enum {
+    GEOIP_STANDARD = 0,
+    GEOIP_MEMORY_CACHE = 1,
+    GEOIP_CHECK_CACHE = 2,
+    GEOIP_INDEX_CACHE = 4,
+} GeoIPOptions;
+
+typedef enum {
+    GEOIP_COUNTRY_EDITION = 1,
+    GEOIP_REGION_EDITION_REV0 = 7,
+    GEOIP_CITY_EDITION_REV0 = 6,
+    GEOIP_ORG_EDITION = 5,
+    GEOIP_ISP_EDITION = 4,
+    GEOIP_CITY_EDITION_REV1 = 2,
+    GEOIP_REGION_EDITION_REV1 = 3,
+    GEOIP_PROXY_EDITION = 8,
+    GEOIP_ASNUM_EDITION = 9,
+    GEOIP_NETSPEED_EDITION = 10
+} GeoIPDBTypes;
+
+typedef enum {
+    GEOIP_ANON_PROXY = 1,
+    GEOIP_HTTP_X_FORWARDED_FOR_PROXY = 2,
+    GEOIP_HTTP_CLIENT_IP_PROXY = 3,
+} GeoIPProxyTypes;
+
+typedef enum {
+    GEOIP_UNKNOWN_SPEED = 0,
+    GEOIP_DIALUP_SPEED = 1,
+    GEOIP_CABLEDSL_SPEED = 2,
+    GEOIP_CORPORATE_SPEED = 3,
+} GeoIPNetspeedValues;
+
+extern char **GeoIPDBFileName;
+extern const char *GeoIPDBDescription[NUM_DB_TYPES];
+extern const char *GeoIPCountryDBFileName;
+extern const char *GeoIPRegionDBFileName;
+extern const char *GeoIPCityDBFileName;
+extern const char *GeoIPOrgDBFileName;
+extern const char *GeoIPISPDBFileName;
+
+extern const char GeoIP_country_code[247][3];
+extern const char GeoIP_country_code3[247][4];
+extern const char *GeoIP_country_name[247];
+extern const char GeoIP_country_continent[247][3];
+
+#ifdef DLL
+#define GEOIP_API __declspec(dllexport)
+#else
+#define GEOIP_API
+#endif /* DLL */
+
+GEOIP_API GeoIP *GeoIP_open_type(int type, int flags);
+GEOIP_API GeoIP *GeoIP_new(int flags);
+GEOIP_API GeoIP *GeoIP_open(const char *filename, int flags);
+GEOIP_API int GeoIP_db_avail(int type);
+GEOIP_API void GeoIP_delete(GeoIP *gi);
+GEOIP_API const char *GeoIP_country_code_by_addr(GeoIP *gi, const char *addr);
+GEOIP_API const char *GeoIP_country_code_by_name(GeoIP *gi, const char *host);
+GEOIP_API const char *GeoIP_country_code3_by_addr(GeoIP *gi, const char *addr);
+GEOIP_API const char *GeoIP_country_code3_by_name(GeoIP *gi, const char *host);
+GEOIP_API const char *GeoIP_country_name_by_addr(GeoIP *gi, const char *addr);
+GEOIP_API const char *GeoIP_country_name_by_name(GeoIP *gi, const char *host);
+GEOIP_API const char *GeoIP_country_name_by_ipnum(GeoIP *gi, unsigned long ipnum);
+GEOIP_API const char *GeoIP_country_code_by_ipnum(GeoIP *gi, unsigned long ipnum);
+GEOIP_API const char *GeoIP_country_code3_by_ipnum(GeoIP *gi, unsigned long ipnum);
+
+/* Deprecated - for backwards compatibility only */
+GEOIP_API int GeoIP_country_id_by_addr(GeoIP *gi, const char *addr);
+GEOIP_API int GeoIP_country_id_by_name(GeoIP *gi, const char *host);
+GEOIP_API char *GeoIP_org_by_addr(GeoIP *gi, const char *addr);
+GEOIP_API char *GeoIP_org_by_name(GeoIP *gi, const char *host);
+/* End deprecated */
+
+GEOIP_API int GeoIP_id_by_addr(GeoIP *gi, const char *addr);
+GEOIP_API int GeoIP_id_by_name(GeoIP *gi, const char *host);
+GEOIP_API int GeoIP_id_by_ipnum(GeoIP *gi, unsigned long ipnum);
+
+GEOIP_API GeoIPRegion *GeoIP_region_by_addr(GeoIP *gi, const char *addr);
+GEOIP_API GeoIPRegion *GeoIP_region_by_name(GeoIP *gi, const char *host);
+GEOIP_API GeoIPRegion *GeoIP_region_by_ipnum(GeoIP *gi, unsigned long ipnum);
+
+/* Warning - don't call this after GeoIP_assign_region_by_inetaddr calls */
+GEOIP_API void GeoIPRegion_delete(GeoIPRegion *gir);
+
+GEOIP_API void GeoIP_assign_region_by_inetaddr(GeoIP *gi, unsigned long inetaddr, GeoIPRegion *gir);
+
+/* Used to query GeoIP Organization, ISP and AS Number databases */
+GEOIP_API char *GeoIP_name_by_ipnum(GeoIP *gi, unsigned long ipnum);
+GEOIP_API char *GeoIP_name_by_addr(GeoIP *gi, const char *addr);
+GEOIP_API char *GeoIP_name_by_name(GeoIP *gi, const char *host);
+
+GEOIP_API char *GeoIP_database_info(GeoIP *gi);
+GEOIP_API unsigned char GeoIP_database_edition(GeoIP *gi);
+
+#ifdef BSD
+#define memcpy(dest, src, n) bcopy(src, dest, n)
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* GEOIP_H */
--- ./plugins/infowidget/geoipmanager.cpp.orig	2021-08-04 21:50:44.000000000 -0500
+++ ./plugins/infowidget/geoipmanager.cpp	2021-08-15 00:18:01.329498947 -0500
@@ -20,16 +20,47 @@
 
 namespace kt
 {
+QUrl GeoIPManager::geoip_url = QUrl(QStringLiteral("http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz"));
+
 GeoIPManager::GeoIPManager(QObject *parent)
     : QObject(parent)
+    , geo_ip(nullptr)
+    , decompress_thread(nullptr)
 {
+#ifdef USE_SYSTEM_GEOIP
     geo_ip = GeoIP_open_type(GEOIP_COUNTRY_EDITION, GEOIP_STANDARD);
+#else
+    geoip_data_file = QStandardPaths::locate(QStandardPaths::AppDataLocation, QStringLiteral("geoip.dat"));
+    if (geoip_data_file.isEmpty())
+        geoip_data_file = QStandardPaths::locate(QStandardPaths::AppDataLocation, QStringLiteral("GeoIP.dat"));
+
+    if (geoip_data_file.isEmpty()) {
+        downloadDataBase();
+    } else {
+        geo_ip = GeoIP_open(QFile::encodeName(geoip_data_file).data(), 0);
+        if (geo_ip) {
+            QFileInfo fi(geoip_data_file);
+            QDateTime now = QDateTime::currentDateTime();
+            if (fi.lastModified().daysTo(now) >= 30) {
+                // if the last time the geoip file was modified, was more then
+                // 30 days ago, redownload it
+                downloadDataBase();
+            }
+        }
+    }
+#endif
 }
 
 GeoIPManager::~GeoIPManager()
 {
     if (geo_ip)
         GeoIP_delete(geo_ip);
+
+    if (decompress_thread) {
+        decompress_thread->cancel();
+        decompress_thread->wait();
+        delete decompress_thread;
+    }
 }
 
 int GeoIPManager::findCountry(const QString &addr)
@@ -56,4 +87,66 @@
         return QString();
 }
 
+void GeoIPManager::downloadDataBase()
+{
+#ifndef USE_SYSTEM_GEOIP
+    Out(SYS_INW | LOG_NOTICE) << "Downloading GeoIP database: " << geoip_url << endl;
+    download_destination = kt::DataDir(CreateIfNotExists) + geoip_url.fileName();
+    KIO::CopyJob *job = KIO::copy(geoip_url, QUrl::fromLocalFile(download_destination), KIO::Overwrite | KIO::HideProgressInfo);
+    connect(job, &KIO::CopyJob::result, this, &GeoIPManager::databaseDownloadFinished);
+#endif
+}
+
+void GeoIPManager::databaseDownloadFinished(KJob *job)
+{
+    if (job->error()) {
+        Out(SYS_INW | LOG_IMPORTANT) << "Failed to download GeoIP database: " << job->errorString() << endl;
+        return;
+    }
+
+    if (download_destination.endsWith(QLatin1String(".dat")) || download_destination.endsWith(QLatin1String(".DAT"))) {
+        Out(SYS_INW | LOG_NOTICE) << "GeoIP database downloaded, opening ...  " << endl;
+        geoip_data_file = download_destination;
+        if (geo_ip) {
+            GeoIP_delete(geo_ip);
+            geo_ip = nullptr;
+        }
+        geo_ip = GeoIP_open(QFile::encodeName(geoip_data_file).data(), 0);
+        if (!geo_ip)
+            Out(SYS_INW | LOG_NOTICE) << "Failed to open GeoIP database  " << endl;
+    } else {
+        Out(SYS_INW | LOG_NOTICE) << "GeoIP database downloaded, decompressing ...  " << endl;
+        // decompress the file
+        decompress_thread = new bt::DecompressThread(download_destination, kt::DataDir() + QLatin1String("geoip.dat"));
+        connect(decompress_thread, &bt::DecompressThread::finished, this, &GeoIPManager::decompressFinished, Qt::QueuedConnection);
+        decompress_thread->start(QThread::IdlePriority);
+    }
+}
+
+void GeoIPManager::decompressFinished()
+{
+    Out(SYS_INW | LOG_NOTICE) << "GeoIP database decompressed, opening ...  " << endl;
+    if (!decompress_thread->error()) {
+        geoip_data_file = kt::DataDir() + QLatin1String("geoip.dat");
+        if (geo_ip) {
+            GeoIP_delete(geo_ip);
+            geo_ip = nullptr;
+        }
+        geo_ip = GeoIP_open(QFile::encodeName(geoip_data_file).data(), 0);
+        if (!geo_ip)
+            Out(SYS_INW | LOG_NOTICE) << "Failed to open GeoIP database  " << endl;
+    }
+
+    decompress_thread->wait();
+    delete decompress_thread;
+    decompress_thread = nullptr;
+}
+
+void GeoIPManager::setGeoIPUrl(const QUrl &url)
+{
+    geoip_url = url;
+}
+
+///////////////////////////////////
+
 }
--- ./plugins/infowidget/GeoIP.c.orig	2021-08-15 00:18:01.329498947 -0500
+++ ./plugins/infowidget/GeoIP.c	2021-08-15 00:18:01.329498947 -0500
@@ -0,0 +1,968 @@
+/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 2; tab-width: 2 -*- */
+/* GeoIP.c
+    SPDX-FileCopyrightText: 2003 MaxMind LLC All Rights Reserved.
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#include "GeoIP.h"
+
+#include <netdb.h>
+#include <sys/socket.h>
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#ifndef _WIN32
+#include <netinet/in.h> /* For ntohl */
+#include <arpa/inet.h>
+#else
+#include <windows.h>
+#endif
+#include <assert.h>
+#include <sys/types.h> /* for fstat */
+#include <sys/stat.h>   /* for fstat */
+
+#ifdef HAVE_STDINT_H
+#include <stdint.h>     /* For uint32_t */
+#endif
+
+#ifndef        INADDR_NONE
+#define        INADDR_NONE     -1
+#endif
+
+#define COUNTRY_BEGIN 16776960
+#define STATE_BEGIN_REV0 16700000
+#define STATE_BEGIN_REV1 16000000
+#define STRUCTURE_INFO_MAX_SIZE 20
+#define DATABASE_INFO_MAX_SIZE 100
+#define MAX_ORG_RECORD_LENGTH 300
+#define US_OFFSET 1
+#define CANADA_OFFSET 677
+#define WORLD_OFFSET 1353
+#define FIPS_RANGE 360
+
+#define CHECK_ERR(err, msg) { \
+        if (err != Z_OK) { \
+                fprintf(stderr, "%s error: %d\n", msg, err); \
+                exit(1); \
+        } \
+}
+
+const char GeoIP_country_code[247][3] = { "--", "AP", "EU", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BM", "BN", "BO", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "FX", "GA", "GB", "GD", "GE", "GF", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IN", "IO", "IQ", "IR", "IS", "IT", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "ST", "SV", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TM", "TN", "TO", "TP", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "CS", "ZA", "ZM", "ZR", "ZW", "A1", "A2", "O1"};
+
+const char GeoIP_country_code3[247][4] = { "--", "AP", "EU", "AND", "ARE", "AFG", "ATG", "AIA", "ALB", "ARM", "ANT", "AGO", "AQ", "ARG", "ASM", "AUT", "AUS", "ABW", "AZE", "BIH", "BRB", "BGD", "BEL", "BFA", "BGR", "BHR", "BDI", "BEN", "BMU", "BRN", "BOL", "BRA", "BHS", "BTN", "BV", "BWA", "BLR", "BLZ", "CAN", "CC", "COD", "CAF", "COG", "CHE", "CIV", "COK", "CHL", "CMR", "CHN", "COL", "CRI", "CUB", "CPV", "CX", "CYP", "CZE", "DEU", "DJI", "DNK", "DMA", "DOM", "DZA", "ECU", "EST", "EGY", "ESH", "ERI", "ESP", "ETH", "FIN", "FJI", "FLK", "FSM", "FRO", "FRA", "FX", "GAB", "GBR", "GRD", "GEO", "GUF", "GHA", "GIB", "GRL", "GMB", "GIN", "GLP", "GNQ", "GRC", "GS", "GTM", "GUM", "GNB", "GUY", "HKG", "HM", "HND", "HRV", "HTI", "HUN", "IDN", "IRL", "ISR", "IND", "IO", "IRQ", "IRN", "ISL", "ITA", "JAM", "JOR", "JPN", "KEN", "KGZ", "KHM", "KIR", "COM", "KNA", "PRK", "KOR", "KWT", "CYM", "KAZ", "LAO", "LBN", "LCA", "LIE", "LKA", "LBR", "LSO", "LTU", "LUX", "LVA", "LBY", "MAR", "MCO", "MDA", "MDG", "MHL", "MKD", "MLI", "MMR", "MNG", "MAC", "MNP", "MTQ", "MRT", "MSR", "MLT", "MUS", "MDV", "MWI", "MEX", "MYS", "MOZ", "NAM", "NCL", "NER", "NFK", "NGA", "NIC", "NLD", "NOR", "NPL", "NRU", "NIU", "NZL", "OMN", "PAN", "PER", "PYF", "PNG", "PHL", "PAK", "POL", "SPM", "PCN", "PRI", "PSE", "PRT", "PLW", "PRY", "QAT", "REU", "ROU", "RUS", "RWA", "SAU", "SLB", "SYC", "SDN", "SWE", "SGP", "SHN", "SVN", "SJM", "SVK", "SLE", "SMR", "SEN", "SOM", "SUR", "STP", "SLV", "SYR", "SWZ", "TCA", "TCD", "TF", "TGO", "THA", "TJK", "TKL", "TLS", "TKM", "TUN", "TON", "TUR", "TTO", "TUV", "TWN", "TZA", "UKR", "UGA", "UM", "USA", "URY", "UZB", "VAT", "VCT", "VEN", "VGB", "VIR", "VNM", "VUT", "WLF", "WSM", "YEM", "YT", "SCG", "ZAF", "ZMB", "ZR", "ZWE", "A1", "A2", "O1"};
+
+const char* GeoIP_country_name[247] = {"N/A", "Asia/Pacific Region", "Europe", "Andorra", "United Arab Emirates", "Afghanistan", "Antigua and Barbuda", "Anguilla", "Albania", "Armenia", "Netherlands Antilles", "Angola", "Antarctica", "Argentina", "American Samoa", "Austria", "Australia", "Aruba", "Azerbaijan", "Bosnia and Herzegovina", "Barbados", "Bangladesh", "Belgium", "Burkina Faso", "Bulgaria", "Bahrain", "Burundi", "Benin", "Bermuda", "Brunei Darussalam", "Bolivia", "Brazil", "Bahamas", "Bhutan", "Bouvet Island", "Botswana", "Belarus", "Belize", "Canada", "Cocos (Keeling) Islands", "Congo, The Democratic Republic of the", "Central African Republic", "Congo", "Switzerland", "Cote D'Ivoire", "Cook Islands", "Chile", "Cameroon", "China", "Colombia", "Costa Rica", "Cuba", "Cape Verde", "Christmas Island", "Cyprus", "Czechia", "Germany", "Djibouti", "Denmark", "Dominica", "Dominican Republic", "Algeria", "Ecuador", "Estonia", "Egypt", "Western Sahara", "Eritrea", "Spain", "Ethiopia", "Finland", "Fiji", "Falkland Islands (Malvinas)", "Micronesia, Federated States of", "Faroe Islands", "France", "France, Metropolitan", "Gabon", "United Kingdom", "Grenada", "Georgia", "French Guiana", "Ghana", "Gibraltar", "Greenland", "Gambia", "Guinea", "Guadeloupe", "Equatorial Guinea", "Greece", "South Georgia and the South Sandwich Islands", "Guatemala", "Guam", "Guinea-Bissau", "Guyana", "Hong Kong", "Heard Island and McDonald Islands", "Honduras", "Croatia", "Haiti", "Hungary", "Indonesia", "Ireland", "Israel", "India", "British Indian Ocean Territory", "Iraq", "Iran, Islamic Republic of", "Iceland", "Italy", "Jamaica", "Jordan", "Japan", "Kenya", "Kyrgyzstan", "Cambodia", "Kiribati", "Comoros", "Saint Kitts and Nevis",
+                                       "Korea, Democratic People's Republic of", "Korea, Republic of", "Kuwait", "Cayman Islands", "Kazakhstan", "Lao People's Democratic Republic", "Lebanon", "Saint Lucia", "Liechtenstein", "Sri Lanka", "Liberia", "Lesotho", "Lithuania", "Luxembourg", "Latvia", "Libyan Arab Jamahiriya", "Morocco", "Monaco", "Moldova, Republic of", "Madagascar", "Marshall Islands", "Macedonia", "Mali", "Myanmar", "Mongolia", "Macau", "Northern Mariana Islands", "Martinique", "Mauritania", "Montserrat", "Malta", "Mauritius", "Maldives", "Malawi", "Mexico", "Malaysia", "Mozambique", "Namibia", "New Caledonia", "Niger", "Norfolk Island", "Nigeria", "Nicaragua", "Netherlands", "Norway", "Nepal", "Nauru", "Niue", "New Zealand", "Oman", "Panama", "Peru", "French Polynesia", "Papua New Guinea", "Philippines", "Pakistan", "Poland", "Saint Pierre and Miquelon", "Pitcairn Islands", "Puerto Rico", "Palestinian Territory", "Portugal", "Palau", "Paraguay", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda", "Saudi Arabia", "Solomon Islands", "Seychelles", "Sudan", "Sweden", "Singapore", "Saint Helena", "Slovenia", "Svalbard and Jan Mayen", "Slovakia", "Sierra Leone", "San Marino", "Senegal", "Somalia", "Suriname", "Sao Tome and Principe", "El Salvador", "Syrian Arab Republic", "Swaziland", "Turks and Caicos Islands", "Chad", "French Southern Territories", "Togo", "Thailand", "Tajikistan", "Tokelau", "Turkmenistan", "Tunisia", "Tonga", "East Timor", "Turkey", "Trinidad and Tobago", "Tuvalu", "Taiwan", "Tanzania, United Republic of", "Ukraine", "Uganda", "United States Minor Outlying Islands", "United States", "Uruguay", "Uzbekistan", "Holy See (Vatican City State)", "Saint Vincent and the Grenadines", "Venezuela", "Virgin Islands, British", "Virgin Islands, U.S.", "Vietnam", "Vanuatu", "Wallis and Futuna", "Samoa", "Yemen", "Mayotte", "Serbia and Montenegro", "South Africa", "Zambia", "Zaire", "Zimbabwe",
+                                       "Anonymous Proxy", "Satellite Provider", "Other"
+                                      };
+
+const char GeoIP_country_continent[247][3] = {};
+
+const char* GeoIPDBDescription[NUM_DB_TYPES] = {NULL, "GeoIP Country Edition", "GeoIP City Edition, Rev 1", "GeoIP Region Edition, Rev 1", "GeoIP ISP Edition", "GeoIP Organization Edition", "GeoIP City Edition, Rev 0", "GeoIP Region Edition, Rev 0", "GeoIP Proxy Edition", "GeoIP ASNum Edition", "GeoIP Netspeed Edition"};
+
+char* _GeoIP_full_path_to(const char* file_name)
+{
+    char* path = malloc(sizeof(char) * 1024);
+
+#ifndef _WIN32
+    memset(path, 0, sizeof(char) * 1024);
+    snprintf(path, sizeof(char) * 1024 - 1, "%s/%s", "/home/ivan/geoip.dat", file_name);
+#else
+    char buf[MAX_PATH], *p, *q = NULL;
+    int len;
+    memset(buf, 0, sizeof(buf));
+    len = GetModuleFileNameA(GetModuleHandle(NULL), buf, sizeof(buf) - 1);
+    for (p = buf + len; p > buf; p--)
+        if (*p == '\\')
+        {
+            if (!q)
+                q = p;
+            else
+                *p = '/';
+        }
+    *q = 0;
+    memset(path, 0, sizeof(char) * 1024);
+    snprintf(path, sizeof(char) * 1024 - 1, "%s/%s", buf, file_name);
+#endif
+
+    return path;
+}
+
+char** GeoIPDBFileName = NULL;
+
+void _GeoIP_setup_dbfilename()
+{
+    if (NULL == GeoIPDBFileName)
+    {
+        GeoIPDBFileName = malloc(sizeof(char*) * NUM_DB_TYPES);
+        memset(GeoIPDBFileName, 0, sizeof(char*) * NUM_DB_TYPES);
+
+        GeoIPDBFileName[GEOIP_COUNTRY_EDITION]      = _GeoIP_full_path_to("GeoIP.dat");
+        GeoIPDBFileName[GEOIP_REGION_EDITION_REV0]  = _GeoIP_full_path_to("GeoIPRegion.dat");
+        GeoIPDBFileName[GEOIP_REGION_EDITION_REV1]  = _GeoIP_full_path_to("GeoIPRegion.dat");
+        GeoIPDBFileName[GEOIP_CITY_EDITION_REV0]    = _GeoIP_full_path_to("GeoIPCity.dat");
+        GeoIPDBFileName[GEOIP_CITY_EDITION_REV1]    = _GeoIP_full_path_to("GeoIPCity.dat");
+        GeoIPDBFileName[GEOIP_ISP_EDITION]      = _GeoIP_full_path_to("GeoIPISP.dat");
+        GeoIPDBFileName[GEOIP_ORG_EDITION]      = _GeoIP_full_path_to("GeoIPOrg.dat");
+        GeoIPDBFileName[GEOIP_PROXY_EDITION]        = _GeoIP_full_path_to("GeoIPProxy.dat");
+        GeoIPDBFileName[GEOIP_ASNUM_EDITION]        = _GeoIP_full_path_to("GeoIPASNum.dat");
+        GeoIPDBFileName[GEOIP_NETSPEED_EDITION]     = _GeoIP_full_path_to("GeoIPNetSpeed.dat");
+    }
+}
+
+static
+int _file_exists(const char* file_name)
+{
+    struct stat file_stat;
+    return((stat(file_name, &file_stat) == 0) ? 1 : 0);
+}
+
+int GeoIP_db_avail(int type)
+{
+    const char* filePath;
+    if (type < 0 || type >= NUM_DB_TYPES)
+    {
+        return 0;
+    }
+    filePath = GeoIPDBFileName[type];
+    if (NULL == filePath)
+    {
+        return 0;
+    }
+    return _file_exists(filePath);
+}
+
+static
+void _setup_segments(GeoIP* gi)
+{
+    int i, j;
+    unsigned char delim[3];
+    unsigned char buf[SEGMENT_RECORD_LENGTH];
+
+    /* default to GeoIP Country Edition */
+    gi->databaseType = GEOIP_COUNTRY_EDITION;
+    gi->record_length = STANDARD_RECORD_LENGTH;
+    fseek(gi->GeoIPDatabase, -3l, SEEK_END);
+    for (i = 0; i < STRUCTURE_INFO_MAX_SIZE; i++)
+    {
+        fread(delim, 1, 3, gi->GeoIPDatabase);
+        if (delim[0] == 255 && delim[1] == 255 && delim[2] == 255)
+        {
+            fread(&gi->databaseType, 1, 1, gi->GeoIPDatabase);
+            if (gi->databaseType >= 106)
+            {
+                /* backwards compatibility with databases from April 2003 and earlier */
+                gi->databaseType -= 105;
+            }
+
+            if (gi->databaseType == GEOIP_REGION_EDITION_REV0)
+            {
+                /* Region Edition, pre June 2003 */
+                gi->databaseSegments = malloc(sizeof(int));
+                gi->databaseSegments[0] = STATE_BEGIN_REV0;
+            }
+            else if (gi->databaseType == GEOIP_REGION_EDITION_REV1)
+            {
+                /* Region Edition, post June 2003 */
+                gi->databaseSegments = malloc(sizeof(int));
+                gi->databaseSegments[0] = STATE_BEGIN_REV1;
+            }
+            else if (gi->databaseType == GEOIP_CITY_EDITION_REV0 ||
+                     gi->databaseType == GEOIP_CITY_EDITION_REV1 ||
+                     gi->databaseType == GEOIP_ORG_EDITION ||
+                     gi->databaseType == GEOIP_ISP_EDITION ||
+                     gi->databaseType == GEOIP_ASNUM_EDITION)
+            {
+                /* City/Org Editions have two segments, read offset of second segment */
+                gi->databaseSegments = malloc(sizeof(int));
+                gi->databaseSegments[0] = 0;
+                fread(buf, SEGMENT_RECORD_LENGTH, 1, gi->GeoIPDatabase);
+                for (j = 0; j < SEGMENT_RECORD_LENGTH; j++)
+                {
+                    gi->databaseSegments[0] += (buf[j] << (j * 8));
+                }
+                if (gi->databaseType == GEOIP_ORG_EDITION ||
+                        gi->databaseType == GEOIP_ISP_EDITION)
+                    gi->record_length = ORG_RECORD_LENGTH;
+            }
+            break;
+        }
+        else
+        {
+            fseek(gi->GeoIPDatabase, -4l, SEEK_CUR);
+        }
+    }
+    if (gi->databaseType == GEOIP_COUNTRY_EDITION ||
+            gi->databaseType == GEOIP_PROXY_EDITION ||
+            gi->databaseType == GEOIP_NETSPEED_EDITION)
+    {
+        gi->databaseSegments = malloc(sizeof(int));
+        gi->databaseSegments[0] = COUNTRY_BEGIN;
+    }
+}
+
+static
+int _check_mtime(GeoIP* gi)
+{
+    struct stat buf;
+
+    if (gi->flags & GEOIP_CHECK_CACHE)
+    {
+        if (fstat(fileno(gi->GeoIPDatabase), &buf) != -1)
+        {
+            if (buf.st_mtime > gi->mtime)
+            {
+                /* GeoIP Database file updated */
+                if (gi->flags & GEOIP_MEMORY_CACHE)
+                {
+                    /* reload database into memory cache */
+                    if (realloc(gi->cache, buf.st_size) != NULL)
+                    {
+                        if (fread(gi->cache, sizeof(unsigned char), buf.st_size, gi->GeoIPDatabase) != (size_t) buf.st_size)
+                        {
+                            fprintf(stderr, "Error reading file %s\n", gi->file_path);
+                            return -1;
+                        }
+                        gi->mtime = buf.st_mtime;
+                    }
+                }
+                else
+                {
+                    /* refresh filehandle */
+                    fclose(gi->GeoIPDatabase);
+                    if (gi->databaseSegments != NULL)
+                        free(gi->databaseSegments);
+                    gi->GeoIPDatabase = fopen(gi->file_path, "rb");
+                    if (gi->GeoIPDatabase == NULL)
+                    {
+                        fprintf(stderr, "Error Opening file %s\n", gi->file_path);
+                        return -1;
+                    }
+                    _setup_segments(gi);
+                }
+            }
+        }
+    }
+    return 0;
+}
+
+unsigned int _GeoIP_seek_record(GeoIP* gi, unsigned long ipnum)
+{
+    int depth;
+    unsigned int x;
+    unsigned char stack_buffer[2 * MAX_RECORD_LENGTH];
+    const unsigned char* buf = (gi->cache == NULL) ? stack_buffer : NULL;
+    unsigned int offset = 0;
+
+    const unsigned char* p;
+    int j;
+
+    _check_mtime(gi);
+    for (depth = 31; depth >= 0; depth--)
+    {
+        if (gi->cache == NULL && gi->index_cache == NULL)
+        {
+            /* read from disk */
+            fseek(gi->GeoIPDatabase, (long)gi->record_length * 2 * offset, SEEK_SET);
+            fread(stack_buffer, gi->record_length, 2, gi->GeoIPDatabase);
+        }
+        else if (gi->index_cache == NULL)
+        {
+            /* simply point to record in memory */
+            buf = gi->cache + (long)gi->record_length * 2 * offset;
+        }
+        else
+        {
+            buf = gi->index_cache + (long)gi->record_length * 2 * offset;
+        }
+
+        if (ipnum & (1 << depth))
+        {
+            /* Take the right-hand branch */
+            if (gi->record_length == 3)
+            {
+                /* Most common case is completely unrolled and uses constants. */
+                x = (buf[3 * 1 + 0] << (0 * 8))
+                    + (buf[3 * 1 + 1] << (1 * 8))
+                    + (buf[3 * 1 + 2] << (2 * 8));
+
+            }
+            else
+            {
+                /* General case */
+                j = gi->record_length;
+                p = &buf[2 * j];
+                x = 0;
+                do
+                {
+                    x <<= 8;
+                    x += *(--p);
+                }
+                while (--j);
+            }
+
+        }
+        else
+        {
+            /* Take the left-hand branch */
+            if (gi->record_length == 3)
+            {
+                /* Most common case is completely unrolled and uses constants. */
+                x = (buf[3 * 0 + 0] << (0 * 8))
+                    + (buf[3 * 0 + 1] << (1 * 8))
+                    + (buf[3 * 0 + 2] << (2 * 8));
+            }
+            else
+            {
+                /* General case */
+                j = gi->record_length;
+                p = &buf[1 * j];
+                x = 0;
+                do
+                {
+                    x <<= 8;
+                    x += *(--p);
+                }
+                while (--j);
+            }
+        }
+
+        if (x >= gi->databaseSegments[0])
+        {
+            return x;
+        }
+        offset = x;
+    }
+
+    /* shouldn't reach here */
+    fprintf(stderr, "Error Traversing Database for ipnum = %lu - Perhaps database is corrupt?\n", ipnum);
+    return 0;
+}
+
+unsigned long _GeoIP_addr_to_num(const char* addr)
+{
+    int i;
+    char tok[4];
+    int octet;
+    int j = 0, k = 0;
+    unsigned long ipnum = 0;
+    char c = 0;
+
+    for (i = 0; i < 4; i++)
+    {
+        for (;;)
+        {
+            c = addr[k++];
+            if (c == '.' || c == '\0')
+            {
+                tok[j] = '\0';
+                octet = atoi(tok);
+                if (octet > 255)
+                    return 0;
+                ipnum += (octet << ((3 - i) * 8));
+                j = 0;
+                break;
+            }
+            else if (c >= '0' && c <= '9')
+            {
+                if (j > 2)
+                {
+                    return 0;
+                }
+                tok[j++] = c;
+            }
+            else
+            {
+                return 0;
+            }
+        }
+        if (c == '\0' && i < 3)
+        {
+            return 0;
+        }
+    }
+    return ipnum;
+}
+
+GeoIP* GeoIP_open_type(int type, int flags)
+{
+    GeoIP* gi;
+    const char* filePath;
+    if (type < 0 || type >= NUM_DB_TYPES)
+    {
+        printf("Invalid database type %d\n", type);
+        return NULL;
+    }
+    _GeoIP_setup_dbfilename();
+    filePath = GeoIPDBFileName[type];
+    if (filePath == NULL)
+    {
+        printf("Invalid database type %d\n", type);
+        return NULL;
+    }
+    gi = GeoIP_open(filePath, flags);
+    return gi;
+}
+
+GeoIP* GeoIP_new(int flags)
+{
+    GeoIP* gi;
+    _GeoIP_setup_dbfilename();
+    gi = GeoIP_open(GeoIPDBFileName[GEOIP_COUNTRY_EDITION], flags);
+    return gi;
+}
+
+GeoIP* GeoIP_open(const char* filename, int flags)
+{
+    struct stat buf;
+#ifdef _WIN32
+    WSADATA wsa;
+    if (WSAStartup(MAKEWORD(1, 1), &wsa) != 0)
+        return NULL;
+#endif
+    {
+        GeoIP* gi = (GeoIP*)malloc(sizeof(GeoIP));
+        if (gi == NULL)
+            return NULL;
+        gi->file_path = malloc(sizeof(char) * (strlen(filename) + 1));
+        if (gi->file_path == NULL)
+            return NULL;
+        strcpy(gi->file_path, filename);
+        gi->GeoIPDatabase = fopen(filename, "rb");
+        if (gi->GeoIPDatabase == NULL)
+        {
+            fprintf(stderr, "Error Opening file %s\n", filename);
+            free(gi->file_path);
+            free(gi);
+            return NULL;
+        }
+        else
+        {
+            if (flags & GEOIP_MEMORY_CACHE)
+            {
+                if (fstat(fileno(gi->GeoIPDatabase), &buf) == -1)
+                {
+                    fprintf(stderr, "Error stating file %s\n", filename);
+                    free(gi->file_path);
+                    free(gi);
+                    return NULL;
+                }
+                gi->mtime = buf.st_mtime;
+                gi->cache = (unsigned char*) malloc(sizeof(unsigned char) * buf.st_size);
+                if (gi->cache != NULL)
+                {
+                    if (fread(gi->cache, sizeof(unsigned char), buf.st_size, gi->GeoIPDatabase) != (size_t) buf.st_size)
+                    {
+                        fprintf(stderr, "Error reading file %s\n", filename);
+                        free(gi->cache);
+                        free(gi);
+                        return NULL;
+                    }
+                }
+            }
+            else
+            {
+                if (flags & GEOIP_CHECK_CACHE)
+                {
+                    if (fstat(fileno(gi->GeoIPDatabase), &buf) == -1)
+                    {
+                        fprintf(stderr, "Error stating file %s\n", filename);
+                        free(gi);
+                        return NULL;
+                    }
+                    gi->mtime = buf.st_mtime;
+                }
+                gi->cache = NULL;
+            }
+            gi->flags = flags;
+            _setup_segments(gi);
+            if (flags & GEOIP_INDEX_CACHE)
+            {
+                gi->index_cache = (unsigned char*) malloc(sizeof(unsigned char) * ((gi->databaseSegments[0] * (long)gi->record_length * 2)));
+                if (gi->index_cache != NULL)
+                {
+                    fseek(gi->GeoIPDatabase, 0, SEEK_SET);
+                    if (fread(gi->index_cache, sizeof(unsigned char), gi->databaseSegments[0] * (long)gi->record_length * 2, gi->GeoIPDatabase) != (size_t)(gi->databaseSegments[0] * (long)gi->record_length * 2))
+                    {
+                        fprintf(stderr, "Error reading file %s\n", filename);
+                        free(gi->index_cache);
+                        free(gi);
+                        return NULL;
+                    }
+                }
+            }
+            else
+            {
+                gi->index_cache = NULL;
+            }
+            return gi;
+        }
+    }
+}
+
+void GeoIP_delete(GeoIP* gi)
+{
+    if (gi->GeoIPDatabase != NULL)
+        fclose(gi->GeoIPDatabase);
+    if (gi->cache != NULL)
+        free(gi->cache);
+    if (gi->index_cache != NULL)
+        free(gi->index_cache);
+    if (gi->file_path != NULL)
+        free(gi->file_path);
+    if (gi->databaseSegments != NULL)
+        free(gi->databaseSegments);
+    free(gi);
+}
+
+const char* GeoIP_country_code_by_name(GeoIP* gi, const char* name)
+{
+    int country_id;
+    country_id = GeoIP_id_by_name(gi, name);
+    return (country_id > 0) ? GeoIP_country_code[country_id] : NULL;
+}
+
+const char* GeoIP_country_code3_by_name(GeoIP* gi, const char* name)
+{
+    int country_id;
+    country_id = GeoIP_id_by_name(gi, name);
+    return (country_id > 0) ? GeoIP_country_code3[country_id] : NULL;
+}
+
+const char* GeoIP_country_name_by_name(GeoIP* gi, const char* name)
+{
+    int country_id;
+    country_id = GeoIP_id_by_name(gi, name);
+    return (country_id > 0) ? GeoIP_country_name[country_id] : NULL;
+}
+
+unsigned long _GeoIP_lookupaddress(const char* host)
+{
+    unsigned long addr = inet_addr(host);
+    struct hostent phe2;
+    struct hostent* phe = &phe2;
+    char* buf = NULL;
+    int buflength = 16384;
+    int herr = 0;
+    int result = 0;
+#ifdef HAVE_GETHOSTBYNAME_R
+    buf = malloc(buflength);
+#endif
+    if (addr == INADDR_NONE)
+    {
+#ifdef HAVE_GETHOSTBYNAME_R
+        while (1)
+        {
+            /* we use gethostbyname_r here because it is thread-safe and gethostbyname is not */
+#ifdef GETHOSTBYNAME_R_RETURNS_INT
+            result = gethostbyname_r(host, &phe2, buf, buflength, &phe, &herr);
+#else
+            phe = gethostbyname_r(host, &phe2, buf, buflength, &herr);
+#endif
+            if (herr != ERANGE)
+                break;
+            if (result == 0)
+                break;
+            /* double the buffer if the buffer is too small */
+            buflength = buflength * 2;
+            buf = realloc(buf, buflength);
+        }
+#endif
+#ifndef HAVE_GETHOSTBYNAME_R
+        /* Some systems do not support gethostbyname_r, such as Mac OS X */
+        phe = gethostbyname(host);
+#endif
+        if (!phe || result != 0)
+        {
+            free(buf);
+            return 0;
+        }
+        addr = *((unsigned long*) phe->h_addr_list[0]);
+    }
+#ifdef HAVE_GETHOSTBYNAME_R
+    free(buf);
+#endif
+    return ntohl(addr);
+}
+
+int GeoIP_id_by_name(GeoIP* gi, const char* name)
+{
+    unsigned long ipnum;
+    int ret;
+    if (name == NULL)
+    {
+        return 0;
+    }
+    if (gi->databaseType != GEOIP_COUNTRY_EDITION && gi->databaseType != GEOIP_PROXY_EDITION && gi->databaseType != GEOIP_NETSPEED_EDITION)
+    {
+        printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_COUNTRY_EDITION]);
+        return 0;
+    }
+    if (!(ipnum = _GeoIP_lookupaddress(name)))
+        return 0;
+    ret = _GeoIP_seek_record(gi, ipnum) - COUNTRY_BEGIN;
+    return ret;
+
+}
+
+const char* GeoIP_country_code_by_addr(GeoIP* gi, const char* addr)
+{
+    int country_id;
+    country_id = GeoIP_id_by_addr(gi, addr);
+    return (country_id > 0) ? GeoIP_country_code[country_id] : NULL;
+}
+
+const char* GeoIP_country_code3_by_addr(GeoIP* gi, const char* addr)
+{
+    int country_id;
+    country_id = GeoIP_id_by_addr(gi, addr);
+    return (country_id > 0) ? GeoIP_country_code3[country_id] : NULL;
+    return GeoIP_country_code3[country_id];
+}
+
+const char* GeoIP_country_name_by_addr(GeoIP* gi, const char* addr)
+{
+    int country_id;
+    country_id = GeoIP_id_by_addr(gi, addr);
+    return (country_id > 0) ? GeoIP_country_name[country_id] : NULL;
+    return GeoIP_country_name[country_id];
+}
+
+const char* GeoIP_country_name_by_ipnum(GeoIP* gi, unsigned long ipnum)
+{
+    int country_id;
+    country_id = GeoIP_id_by_ipnum(gi, ipnum);
+    return (country_id > 0) ? GeoIP_country_name[country_id] : NULL;
+}
+
+const char* GeoIP_country_code_by_ipnum(GeoIP* gi, unsigned long ipnum)
+{
+    int country_id;
+    country_id = GeoIP_id_by_ipnum(gi, ipnum);
+    return (country_id > 0) ? GeoIP_country_code[country_id] : NULL;
+}
+
+const char* GeoIP_country_code3_by_ipnum(GeoIP* gi, unsigned long ipnum)
+{
+    int country_id;
+    country_id = GeoIP_id_by_ipnum(gi, ipnum);
+    return (country_id > 0) ? GeoIP_country_code3[country_id] : NULL;
+}
+
+int GeoIP_country_id_by_addr(GeoIP* gi, const char* addr)
+{
+    return GeoIP_id_by_addr(gi, addr);
+}
+
+int GeoIP_country_id_by_name(GeoIP* gi, const char* host)
+{
+    return GeoIP_id_by_name(gi, host);
+}
+
+int GeoIP_id_by_addr(GeoIP* gi, const char* addr)
+{
+    unsigned long ipnum;
+    int ret;
+    if (addr == NULL)
+    {
+        return 0;
+    }
+    if (gi->databaseType != GEOIP_COUNTRY_EDITION &&
+            gi->databaseType != GEOIP_PROXY_EDITION &&
+            gi->databaseType != GEOIP_NETSPEED_EDITION)
+    {
+        printf("Invalid database type %s, expected %s\n",
+               GeoIPDBDescription[(int)gi->databaseType],
+               GeoIPDBDescription[GEOIP_COUNTRY_EDITION]);
+        return 0;
+    }
+    ipnum = _GeoIP_addr_to_num(addr);
+    ret = _GeoIP_seek_record(gi, ipnum) - COUNTRY_BEGIN;
+    return ret;
+}
+
+int GeoIP_id_by_ipnum(GeoIP* gi, unsigned long ipnum)
+{
+    int ret;
+    if (ipnum == 0)
+    {
+        return 0;
+    }
+    if (gi->databaseType != GEOIP_COUNTRY_EDITION &&
+            gi->databaseType != GEOIP_PROXY_EDITION &&
+            gi->databaseType != GEOIP_NETSPEED_EDITION)
+    {
+        printf("Invalid database type %s, expected %s\n",
+               GeoIPDBDescription[(int)gi->databaseType],
+               GeoIPDBDescription[GEOIP_COUNTRY_EDITION]);
+        return 0;
+    }
+    ret = _GeoIP_seek_record(gi, ipnum) - COUNTRY_BEGIN;
+    return ret;
+}
+
+char* GeoIP_database_info(GeoIP* gi)
+{
+    int i;
+    unsigned char buf[3];
+    char* retval;
+    int hasStructureInfo = 0;
+
+    if (gi == NULL)
+        return NULL;
+
+    _check_mtime(gi);
+    fseek(gi->GeoIPDatabase, -3l, SEEK_END);
+
+    /* first get past the database structure information */
+    for (i = 0; i < STRUCTURE_INFO_MAX_SIZE; i++)
+    {
+        fread(buf, 1, 3, gi->GeoIPDatabase);
+        if (buf[0] == 255 && buf[1] == 255 && buf[2] == 255)
+        {
+            hasStructureInfo = 1;
+            break;
+        }
+        fseek(gi->GeoIPDatabase, -4l, SEEK_CUR);
+    }
+    if (hasStructureInfo == 1)
+    {
+        fseek(gi->GeoIPDatabase, -3l, SEEK_CUR);
+    }
+    else
+    {
+        /* no structure info, must be pre Sep 2002 database, go back to end */
+        fseek(gi->GeoIPDatabase, -3l, SEEK_END);
+    }
+
+    for (i = 0; i < DATABASE_INFO_MAX_SIZE; i++)
+    {
+        fread(buf, 1, 3, gi->GeoIPDatabase);
+        if (buf[0] == 0 && buf[1] == 0 && buf[2] == 0)
+        {
+            retval = malloc(sizeof(char) * (i + 1));
+            if (retval == NULL)
+            {
+                return NULL;
+            }
+            fread(retval, 1, i, gi->GeoIPDatabase);
+            retval[i] = '\0';
+            return retval;
+        }
+        fseek(gi->GeoIPDatabase, -4l, SEEK_CUR);
+    }
+    return NULL;
+}
+
+/* GeoIP Region Edition functions */
+
+void GeoIP_assign_region_by_inetaddr(GeoIP* gi, unsigned long inetaddr, GeoIPRegion* region)
+{
+    unsigned int seek_region;
+
+    /* This also writes in the terminating NULs (if you decide to
+     * keep them) and clear any fields that are not set. */
+    memset(region, 0, sizeof(GeoIPRegion));
+
+    seek_region = _GeoIP_seek_record(gi, ntohl(inetaddr));
+
+    if (gi->databaseType == GEOIP_REGION_EDITION_REV0)
+    {
+        /* Region Edition, pre June 2003 */
+        seek_region -= STATE_BEGIN_REV0;
+        if (seek_region >= 1000)
+        {
+            region->country_code[0] = 'U';
+            region->country_code[1] = 'S';
+            region->region[0] = (char)((seek_region - 1000) / 26 + 65);
+            region->region[1] = (char)((seek_region - 1000) % 26 + 65);
+        }
+        else
+        {
+            memcpy(region->country_code, GeoIP_country_code[seek_region], 2);
+        }
+    }
+    else if (gi->databaseType == GEOIP_REGION_EDITION_REV1)
+    {
+        /* Region Edition, post June 2003 */
+        seek_region -= STATE_BEGIN_REV1;
+        if (seek_region < US_OFFSET)
+        {
+            /* Unknown */
+            /* we don't need to do anything here b/c we memset region to 0 */
+        }
+        else if (seek_region < CANADA_OFFSET)
+        {
+            /* USA State */
+            region->country_code[0] = 'U';
+            region->country_code[1] = 'S';
+            region->region[0] = (char)((seek_region - US_OFFSET) / 26 + 65);
+            region->region[1] = (char)((seek_region - US_OFFSET) % 26 + 65);
+        }
+        else if (seek_region < WORLD_OFFSET)
+        {
+            /* Canada Province */
+            region->country_code[0] = 'C';
+            region->country_code[1] = 'A';
+            region->region[0] = (char)((seek_region - CANADA_OFFSET) / 26 + 65);
+            region->region[1] = (char)((seek_region - CANADA_OFFSET) % 26 + 65);
+        }
+        else
+        {
+            /* Not US or Canada */
+            memcpy(region->country_code, GeoIP_country_code[(seek_region - WORLD_OFFSET) / FIPS_RANGE], 2);
+        }
+    }
+}
+
+static
+GeoIPRegion* _get_region(GeoIP* gi, unsigned long ipnum)
+{
+    GeoIPRegion* region;
+
+    region = malloc(sizeof(GeoIPRegion));
+    if (region)
+    {
+        GeoIP_assign_region_by_inetaddr(gi, htonl(ipnum), region);
+    }
+    return region;
+}
+
+GeoIPRegion* GeoIP_region_by_addr(GeoIP* gi, const char* addr)
+{
+    unsigned long ipnum;
+    if (addr == NULL)
+    {
+        return 0;
+    }
+    if (gi->databaseType != GEOIP_REGION_EDITION_REV0 &&
+            gi->databaseType != GEOIP_REGION_EDITION_REV1)
+    {
+        printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
+        return 0;
+    }
+    ipnum = _GeoIP_addr_to_num(addr);
+    return _get_region(gi, ipnum);
+}
+
+GeoIPRegion* GeoIP_region_by_name(GeoIP* gi, const char* name)
+{
+    unsigned long ipnum;
+    if (name == NULL)
+    {
+        return 0;
+    }
+    if (gi->databaseType != GEOIP_REGION_EDITION_REV0 &&
+            gi->databaseType != GEOIP_REGION_EDITION_REV1)
+    {
+        printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
+        return 0;
+    }
+    if (!(ipnum = _GeoIP_lookupaddress(name)))
+        return 0;
+    return _get_region(gi, ipnum);
+}
+
+GeoIPRegion* GeoIP_region_by_ipnum(GeoIP* gi, unsigned long ipnum)
+{
+    if (gi->databaseType != GEOIP_REGION_EDITION_REV0 &&
+            gi->databaseType != GEOIP_REGION_EDITION_REV1)
+    {
+        printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
+        return 0;
+    }
+    return _get_region(gi, ipnum);
+}
+
+void GeoIPRegion_delete(GeoIPRegion* gir)
+{
+    free(gir);
+}
+
+/* GeoIP Organization, ISP and AS Number Edition private method */
+static
+char* _get_name(GeoIP* gi, unsigned long ipnum)
+{
+    int seek_org;
+    char buf[MAX_ORG_RECORD_LENGTH];
+    char* org_buf, * buf_pointer;
+    int record_pointer;
+
+    if (gi->databaseType != GEOIP_ORG_EDITION &&
+            gi->databaseType != GEOIP_ISP_EDITION &&
+            gi->databaseType != GEOIP_ASNUM_EDITION)
+    {
+        printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_ORG_EDITION]);
+        return 0;
+    }
+
+    seek_org = _GeoIP_seek_record(gi, ipnum);
+    if (seek_org == (int) gi->databaseSegments[0])
+        return NULL;
+
+    record_pointer = seek_org + (2 * gi->record_length - 1) * gi->databaseSegments[0];
+
+    if (gi->cache == NULL)
+    {
+        fseek(gi->GeoIPDatabase, record_pointer, SEEK_SET);
+        fread(buf, sizeof(char), MAX_ORG_RECORD_LENGTH, gi->GeoIPDatabase);
+        org_buf = malloc(sizeof(char) * (strlen(buf) + 1));
+        strcpy(org_buf, buf);
+    }
+    else
+    {
+        buf_pointer = (char*)gi->cache + (long)record_pointer;
+        org_buf = malloc(sizeof(char) * (strlen(buf_pointer) + 1));
+        strcpy(org_buf, buf_pointer);
+    }
+    return org_buf;
+}
+
+char* GeoIP_name_by_ipnum(GeoIP* gi, unsigned long ipnum)
+{
+    return _get_name(gi, ipnum);
+}
+
+char* GeoIP_name_by_addr(GeoIP* gi, const char* addr)
+{
+    unsigned long ipnum;
+    if (addr == NULL)
+    {
+        return 0;
+    }
+    ipnum = _GeoIP_addr_to_num(addr);
+    return _get_name(gi, ipnum);
+}
+
+char* GeoIP_name_by_name(GeoIP* gi, const char* name)
+{
+    unsigned long ipnum;
+    if (name == NULL)
+    {
+        return 0;
+    }
+    if (!(ipnum = _GeoIP_lookupaddress(name)))
+        return 0;
+    return _get_name(gi, ipnum);
+}
+
+char* GeoIP_org_by_ipnum(GeoIP* gi, unsigned long ipnum)
+{
+    return GeoIP_name_by_ipnum(gi, ipnum);
+}
+
+char* GeoIP_org_by_addr(GeoIP* gi, const char* addr)
+{
+    return GeoIP_name_by_addr(gi, addr);
+}
+
+char* GeoIP_org_by_name(GeoIP* gi, const char* name)
+{
+    return GeoIP_name_by_name(gi, name);
+}
+
+unsigned char GeoIP_database_edition(GeoIP* gi)
+{
+    return gi->databaseType;
+}
--- ./plugins/infowidget/CMakeLists.txt.orig	2021-08-04 21:50:44.000000000 -0500
+++ ./plugins/infowidget/CMakeLists.txt	2021-08-15 00:20:25.218503074 -0500
@@ -1,23 +1,30 @@
-# Add an option to compile & link against system GeoIP
-option(BUILD_WITH_GEOIP
+# Add an option to compile & link against system GeoIP (off by default)
+option(WITH_SYSTEM_GEOIP 
 	"Link InfoWidget plugin against system GeoIP library and use system-wide default GeoIP Country database"
-	ON)
+	OFF)
 
-if (BUILD_WITH_GEOIP)
+if (WITH_SYSTEM_GEOIP)
 	find_path(GEOIP_INCLUDE_DIR NAMES GeoIP.h PATHS / ${INCLUDE_INSTALL_DIR}/)
-	find_library(GEOIP_LIBRARY NAMES GeoIP PATHS ${LIB_INSTALL_DIR})
+	find_library(GEOIP_LIBRARY NAMES GeoIP PATHS ${KDE4_LIB_DIR} ${LIB_INSTALL_DIR})
 	
 	if (NOT GEOIP_INCLUDE_DIR OR NOT GEOIP_LIBRARY)
-		set(BUILD_WITH_GEOIP OFF CACHE BOOL
+		set(WITH_SYSTEM_GEOIP OFF CACHE BOOL
 		  "GeoIP development files could not be found on this system. Forcing this option to OFF"
 		  FORCE)
-		message(WARNING "GeoIP library development files could not be found on your system.")
-	else()
-        message(STATUS "   Linking InfoWidget against system GeoIP library")
-        include_directories(GEOIP_INCLUDE_DIR)
-        set(geoip_link ${GEOIP_LIBRARY})
-    endif()
-endif(BUILD_WITH_GEOIP)
+		message(SEND_ERROR
+		  "GeoIP library development files could not be found on your system. Embedding a local copy of GeoIP instead")
+	endif(NOT GEOIP_INCLUDE_DIR OR NOT GEOIP_LIBRARY)
+endif(WITH_SYSTEM_GEOIP)
+
+if (WITH_SYSTEM_GEOIP)
+	message(STATUS "   Linking InfoWidget against system GeoIP library")
+	add_definitions( -DUSE_SYSTEM_GEOIP )
+	include_directories(GEOIP_INCLUDE_DIR)
+	set(geoip_link ${GEOIP_LIBRARY})
+else(WITH_SYSTEM_GEOIP)
+	message(STATUS "   Compiling GeoIP support directly into InfoWidget plugin")
+	set(geoip_src GeoIP.c)
+endif(WITH_SYSTEM_GEOIP)    
 
 add_library(ktorrent_infowidget MODULE)
 
@@ -36,19 +43,14 @@
 	trackerview.cpp
 	trackermodel.cpp
 	addtrackersdialog.cpp
+	${geoip_src}
+	geoipmanager.cpp
 	flagdb.cpp
 	iwfiletreemodel.cpp
 	iwfilelistmodel.cpp
 	webseedstab.cpp
 	webseedsmodel.cpp)
 
-if (BUILD_WITH_GEOIP)
-    target_sources(ktorrent_infowidget PRIVATE geoipmanager.cpp)
-    add_definitions(-DBUILD_WITH_GEOIP=1)
-else()
-    add_definitions(-DBUILD_WITH_GEOIP=0)
-endif()
-
 ki18n_wrap_ui(ktorrent_infowidget iwprefpage.ui statustab.ui chunkdownloadview.ui trackerview.ui webseedstab.ui)
 kconfig_add_kcfg_files(ktorrent_infowidget infowidgetpluginsettings.kcfgc)
 
--- ./plugins/infowidget/geoipmanager.h.orig	2021-08-04 21:50:44.000000000 -0500
+++ ./plugins/infowidget/geoipmanager.h	2021-08-15 00:18:01.330498947 -0500
@@ -7,7 +7,21 @@
 #define KT_GEOIPMANAGER_H
 
 #include <QObject>
+#include <QThread>
+#include <QUrl>
+
+#ifdef USE_SYSTEM_GEOIP
 #include <GeoIP.h>
+#else
+#include "GeoIP.h"
+#endif
+
+class KJob;
+
+namespace bt
+{
+class DecompressThread;
+}
 
 namespace kt
 {
@@ -42,8 +56,28 @@
      */
     QString countryCode(int country_id);
 
+    /// Get the database URL
+    static QUrl geoIPUrl()
+    {
+        return geoip_url;
+    }
+
+    /// Set the database URL
+    static void setGeoIPUrl(const QUrl &url);
+
+    /// Download the database
+    void downloadDataBase();
+
+private Q_SLOTS:
+    void databaseDownloadFinished(KJob *job);
+    void decompressFinished();
+
 private:
     GeoIP *geo_ip;
+    QString geoip_data_file;
+    QString download_destination;
+    bt::DecompressThread *decompress_thread;
+    static QUrl geoip_url;
 };
 
 }
--- ./plugins/infowidget/peerviewmodel.cpp.orig	2021-08-04 21:50:44.000000000 -0500
+++ ./plugins/infowidget/peerviewmodel.cpp	2021-08-15 00:18:01.330498947 -0500
@@ -13,13 +13,10 @@
 #include <KLocalizedString>
 
 #include "flagdb.h"
+#include "geoipmanager.h"
 #include <interfaces/torrentinterface.h>
 #include <util/functions.h>
 
-#if BUILD_WITH_GEOIP
-#include "geoipmanager.h"
-#endif
-
 using namespace bt;
 
 namespace kt
@@ -28,12 +25,7 @@
 static bool icons_loaded = false;
 static FlagDB flagDB(22, 18);
 
-PeerViewModel::Item::Item(bt::PeerInterface *peer
-#if BUILD_WITH_GEOIP
-                          ,
-                          GeoIPManager *geo_ip
-#endif
-                          )
+PeerViewModel::Item::Item(bt::PeerInterface *peer, GeoIPManager *geo_ip)
     : peer(peer)
 {
     stats = peer->getStats();
@@ -47,13 +39,13 @@
             flagDB.addFlagSource(path + QStringLiteral("/%1/flag.png"));
     }
 
-#if BUILD_WITH_GEOIP
-    int country_id = geo_ip->findCountry(stats.ip_address);
-    if (country_id > 0) {
-        country = geo_ip->countryName(country_id);
-        flag = flagDB.getFlag(geo_ip->countryCode(country_id));
+    if (geo_ip) {
+        int country_id = geo_ip->findCountry(stats.ip_address);
+        if (country_id > 0) {
+            country = geo_ip->countryName(country_id);
+            flag = flagDB.getFlag(geo_ip->countryCode(country_id));
+        }
     }
-#endif
 }
 
 bool PeerViewModel::Item::changed() const
@@ -191,10 +183,9 @@
 
 PeerViewModel::PeerViewModel(QObject *parent)
     : QAbstractTableModel(parent)
+    , geo_ip(nullptr)
 {
-#if BUILD_WITH_GEOIP
     geo_ip = new GeoIPManager(this);
-#endif
 }
 
 PeerViewModel::~PeerViewModel()
@@ -204,12 +195,7 @@
 
 void PeerViewModel::peerAdded(bt::PeerInterface *peer)
 {
-    items.append(new Item(peer
-#if BUILD_WITH_GEOIP
-                          ,
-                          geo_ip
-#endif
-                          ));
+    items.append(new Item(peer, geo_ip));
     insertRow(items.count() - 1);
 }
 
--- ./plugins/infowidget/infowidgetplugin.cpp.orig	2021-08-04 21:50:44.000000000 -0500
+++ ./plugins/infowidget/infowidgetplugin.cpp	2021-08-15 00:18:01.330498947 -0500
@@ -18,6 +18,7 @@
 
 #include "chunkdownloadview.h"
 #include "fileview.h"
+#include "geoipmanager.h"
 #include "infowidgetpluginsettings.h"
 #include "iwprefpage.h"
 #include "monitor.h"
--- ./plugins/infowidget/peerviewmodel.h.orig	2021-08-04 21:50:44.000000000 -0500
+++ ./plugins/infowidget/peerviewmodel.h	2021-08-15 00:18:01.331498947 -0500
@@ -61,12 +61,7 @@
         QString country;
         QIcon flag;
 
-        Item(bt::PeerInterface *peer
-#if BUILD_WITH_GEOIP
-             ,
-             GeoIPManager *geo_ip
-#endif
-        );
+        Item(bt::PeerInterface *peer, GeoIPManager *geo_ip);
 
         bool changed() const;
         QVariant data(int col) const;
@@ -76,9 +71,7 @@
 
 private:
     QVector<Item *> items;
-#if BUILD_WITH_GEOIP
-    GeoIPManager *geo_ip = nullptr;
-#endif
+    GeoIPManager *geo_ip;
 };
 
 }
